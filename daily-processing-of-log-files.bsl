//  *** общий модуль запуска ежедневной обработки
Процедура ЛогСообщить(Знач Сообщение) Экспорт
	Попытка
		ЛогФайл = Новый ЗаписьТекста("\\Loodsmanserv\eptp\stanki-logfile-archive\logfile.txt", КодировкаТекста.UTF8, , Истина,);
		ЛогФайл.Записать(Формат(СерверныеФункции.ТекущаяДатаСервера()) + " : " + Сообщение + Символы.ПС);
		ЛогФайл.Закрыть();
	Исключение
		Попытка
			ЛогФайл = Новый ЗаписьТекста("\\sql\отчёт\Обработки1С8\КонтрольныеКартыОборудования\logfile_backup.txt", КодировкаТекста.UTF8, , Истина,);
			ЛогФайл.Записать(Формат(СерверныеФункции.ТекущаяДатаСервера()) + " : " + Сообщение + Символы.ПС);
			ЛогФайл.Закрыть();
		Исключение
		КонецПопытки;
	КонецПопытки;
КонецПроцедуры

Процедура ЗапуститьОбработкуЛогФайлов217() Экспорт
	Попытка
		ЛогСообщить("ЕжедневнаяОбработкаЛогФайлов запущена");
		//	***	БезопасныйРежим = Ложь, т.к. часть функций, например "НайтиФайлы", опасные для выполнения
		ВнешняяОбработка = ВнешниеОбработки.Создать("\\sql\отчёт\Обработки1С8\КонтрольныеКартыОборудования\ОбработкаLogФайлов.epf", Ложь);	
		ВнешняяОбработка.ЕжедневнаяОбработкаЛогФайлов();
		ЛогСообщить("ЕжедневнаяОбработкаЛогФайлов завершена");
	Исключение
		ЛогСообщить(ОписаниеОшибки());
	КонецПопытки;	
КонецПроцедуры

//  *** внешний модуль ОбработкаLogФайлов.epf содержащий методы обработки
Перем ТаблицаПрограмм, СтрокиДляСохраненияФайла;
Перем ВремяРаботы, ВремяФактическое, ВремяРеальное, ВремяПростоя;
Перем Станок;
Перем МоделиОборудования;

//	************	Основные методы обработки
Процедура ЕжедневнаяОбработкаЛогФайлов() Экспорт	
	Попытка		//	***	inv34453
		ОбработкаLogФайлов.ЛогСообщить("начало обработки id 10 = inv34453");
		ЗапуститьОбработкуСпрОбработкаLOG_Файлов(Справочники.ОбработкаLOG_Файлов.НайтиПоКоду(10));
	Исключение
		ОбработкаLogФайлов.ЛогСообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Попытка		//	***	inv34670
		ОбработкаLogФайлов.ЛогСообщить("начало обработки id 11 = inv34670");
		ЗапуститьОбработкуСпрОбработкаLOG_Файлов(Справочники.ОбработкаLOG_Файлов.НайтиПоКоду(11));
	Исключение
		ОбработкаLogФайлов.ЛогСообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Попытка		//	***	inv34745
		ОбработкаLogФайлов.ЛогСообщить("начало обработки id 12 = inv34745");
		ЗапуститьОбработкуСпрОбработкаLOG_Файлов(Справочники.ОбработкаLOG_Файлов.НайтиПоКоду(12));
	Исключение
		ОбработкаLogФайлов.ЛогСообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Попытка		//	***	inv34695
		ОбработкаLogФайлов.ЛогСообщить("начало обработки id 14 = inv34695");
		ЗапуститьОбработкуСпрОбработкаLOG_Файлов(Справочники.ОбработкаLOG_Файлов.НайтиПоКоду(14));
	Исключение
		ОбработкаLogФайлов.ЛогСообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Попытка		//	***	inv34932
		ОбработкаLogФайлов.ЛогСообщить("начало обработки id 15 = inv34932");
		ЗапуститьОбработкуСпрОбработкаLOG_Файлов(Справочники.ОбработкаLOG_Файлов.НайтиПоКоду(15));
	Исключение
		ОбработкаLogФайлов.ЛогСообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Попытка		//	***	inv34933
		ОбработкаLogФайлов.ЛогСообщить("начало обработки id 16 = inv34933");
		ЗапуститьОбработкуСпрОбработкаLOG_Файлов(Справочники.ОбработкаLOG_Файлов.НайтиПоКоду(16));
	Исключение
		ОбработкаLogФайлов.ЛогСообщить(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

Процедура ЗапуститьОбработкуСпрОбработкаLOG_Файлов(Знач СпрОбработкаLOG_Файлов) Экспорт
	Если ЗначениеЗаполнено(СпрОбработкаLOG_Файлов) Тогда 
		Если ЗначениеЗаполнено(СпрОбработкаLOG_Файлов.Функция) Тогда
			МоделиОборудования = Новый Массив();
			Для Каждого стр Из СпрОбработкаLOG_Файлов.СписокМоделей Цикл 
				МоделиОборудования.Добавить(стр.МодельОборудования);
			КонецЦикла;
			Массив = НайтиФайлы(СпрОбработкаLOG_Файлов.ДиректорияГде, "*.log", Истина);
			
			Если Не СпрОбработкаLOG_Файлов.МножественныйВыбор И Массив.Количество() > 1 Тогда
				//Предупреждение("Множественный выбор отключен, но в каталоге больше одного файла! Необходимо удалить лишние файлы и повторить.");
				Возврат;
			КонецЕсли;
			
			ОбработкаLogФайлов.ЛогСообщить("" + СпрОбработкаLOG_Файлов.ДиректорияГде + " найдено " + Массив.Количество() + " файлов");
			
			НомерФайла = 0;
			Для Каждого текФайл из Массив Цикл 
				Если НачалоДня(СерверныеФункции.ТекущаяДатаСервера()) <> Дата(Лев(текФайл.Имя, 8)) Тогда
					ОбработкаLogФайлов.ЛогСообщить("файл начало обработки " + текФайл.ПолноеИмя);
					НомерФайла = НомерФайла + 1;	
					//Состояние("Файл номер = " + НомерФайла + " | Количество Файлов = " + Массив.Количество() + " | ПолноеИмя = " + текФайл.ПолноеИмя);
					Лог("Файл номер = " + НомерФайла + " | Количество Файлов = " + Массив.Количество() + " | ПолноеИмя = " + текФайл.ПолноеИмя); 
					
					Попытка		
						ОбработатьФайл(текФайл, СпрОбработкаLOG_Файлов.Функция, СпрОбработкаLOG_Файлов.Участок);
					Исключение
						ОбработкаLogФайлов.ЛогСообщить("файл пропущен " + текФайл.ПолноеИмя + " ошибка " + ОписаниеОшибки());			
						Продолжить;
					КонецПопытки;
					
					//	*** для Мива и АОИ создаются несколько контрольных карт для диапазона дат внутри обработки файла
					Если СпрОбработкаLOG_Файлов.Функция <> Перечисления.ФункцииОбработкиЛогФайлов.ПрямоеЭкспонированиеМива И СпрОбработкаLOG_Файлов.Функция <> Перечисления.ФункцииОбработкиЛогФайлов.ОптическийКонтрольАОИ Тогда
						НоваяКонтрольнаяКарта = Документы.КонтрольнаяКартаОборудования.СоздатьДокумент();
						ЗаполнитьКонтрольнуюКарту(НоваяКонтрольнаяКарта, Станок, СохранитьНовыйФайл(СтрокиДляСохраненияФайла, текФайл.Имя, СпрОбработкаLOG_Файлов.Функция));
						НоваяКонтрольнаяКарта.Записать();
						
						//Форма = НоваяКонтрольнаяКарта.ПолучитьФорму();
						//Форма.Открыть();
					КонецЕсли;
					
					ОбработкаLogФайлов.ЛогСообщить("файл обработан " + текФайл.ПолноеИмя);
					
					Если СпрОбработкаLOG_Файлов.УдалятьФайлы Тогда
						Попытка
							КопироватьФайл(текФайл.ПолноеИмя, "\\Loodsmanserv\eptp\stanki-logfile-archive\" + Прав(текФайл.Путь, 9) + текФайл.Имя); 
							ОбработкаLogФайлов.ЛогСообщить("файл скопирован в " + "\\Loodsmanserv\eptp\stanki-logfile-archive\" + Прав(текФайл.Путь, 9) + текФайл.Имя);
							
							УдалитьФайлы(текФайл.ПолноеИмя);  
							ОбработкаLogФайлов.ЛогСообщить("файл удален " + текФайл.ПолноеИмя);
						Исключение
							ОбработкаLogФайлов.ЛогСообщить(ОписаниеОшибки());
						КонецПопытки;
					КонецЕсли;
				Иначе
					ОбработкаLogФайлов.ЛогСообщить("файл пропущен " + текФайл.ПолноеИмя + " лог сегодняшнего дня не требуется обрабатывать");
				КонецЕсли;	
			КонецЦикла;		
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

Процедура ОбновитьДанныеИзЛогФайла(ОбъектКонтрольнаяКарта) Экспорт
	Если ПустаяСтрока(ОбъектКонтрольнаяКарта.ЛогФайл) Тогда
		Сообщить("К контрольной карте " + ОбъектКонтрольнаяКарта.Номер + " не привязан Лог Файл!");
	Иначе
		МассивФайлов = НайтиФайлы(ОбъектКонтрольнаяКарта.ЛогФайл.ПутьФайла);
		Для Каждого текФайл Из МассивФайлов Цикл 
			МоделиОборудования = Новый Массив();
			МоделиОборудования.Добавить(ОбъектКонтрольнаяКарта.Оборудование.МодельОборудования);
			ОбработатьФайл(текФайл, ПолучитьФункциюОбработки(ОбъектКонтрольнаяКарта.Оборудование), ОбъектКонтрольнаяКарта.Участок);
			ЗаполнитьКонтрольнуюКарту(ОбъектКонтрольнаяКарта, ОбъектКонтрольнаяКарта.Оборудование, ОбъектКонтрольнаяКарта.ЛогФайл);
		КонецЦикла;
	КонецЕсли;		
КонецПроцедуры

Процедура ОбработатьФайл(Знач обрабФайл, Знач ФункцияОбработки, Знач УчастокОбработки)
	ТаблицаПрограмм.Очистить();
	СтрокиДляСохраненияФайла.Очистить();
	ВремяРаботы = 0; 
	ВремяФактическое = 0; 
	ВремяРеальное = 0; 
	ВремяПростоя = 0;
	
	Станок = ПолучитьСтанок(СтрЗаменить(Прав(обрабФайл.Путь, 6), "\", ""), УчастокОбработки);
	
	Лог("Используем алгоритм для : " + ФункцияОбработки);
	
	Если ФункцияОбработки = Перечисления.ФункцииОбработкиЛогФайлов.Сверлильная Тогда 
		ОбойтиФайлСверлильная(обрабФайл);
	ИначеЕсли ФункцияОбработки = Перечисления.ФункцииОбработкиЛогФайлов.СверлильнаяПозалюкс Тогда 
		ОбойтиФайлСверлильнаяПозалюкс(обрабФайл);			
	ИначеЕсли ФункцияОбработки = Перечисления.ФункцииОбработкиЛогФайлов.ПрямоеЭкспонированиеМива Тогда 
		ОбойтиФайлМИВА(обрабФайл);	
	ИначеЕсли ФункцияОбработки = Перечисления.ФункцииОбработкиЛогФайлов.ОптическийКонтрольАОИ Тогда 
		ОбойтиФайлАОИ(обрабФайл);	
	ИначеЕсли ФункцияОбработки = Перечисления.ФункцииОбработкиЛогФайлов.СверлильнаяLM2_99998 Тогда 
		ОбойтиФайлСверлильнаяLM2_99998(обрабФайл);
	КонецЕсли;	
	
	Если Отладка Тогда
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.Очистить();
		Макет = ПолучитьМакет("Макет");
		Шапка = Макет.ПолучитьОбласть("Шапка");
		Строчка = Макет.ПолучитьОбласть("Строчка");
		ТабДок.Вывести(Шапка);
		Для Каждого Стр из ТаблицаПрограмм Цикл
			Строчка.Параметры.Заполнить(Стр);
			ТабДок.Вывести(Строчка);
		КонецЦикла;
		
		ТабДок.Показать();
		ТаблицаПрограмм.ВыбратьСтроку();
	КонецЕсли;	
КонецПроцедуры

//	************	Вспомогательные методы для всех типов станков
Функция Лог(Знач Икс)
	Если Отладка Тогда
		Сообщить(Формат(ТекущаяДата(), "ДЛФ=T") + "|" + Строка(ТипЗнч(Икс)) + "|" + Строка(Икс));
	КонецЕсли;
КонецФункции

Функция ПолучитьРазницуМеждуСтроками(Знач СтрКонец, Знач СтрНачало = "00:00:00")	//	Когда передают только СтрКонец, выполняет перевод в секунды
	Попытка
		СтрНачалоЧасы = Число(Лев(СтрНачало, 2));
		СтрНачалоМинуты = Число(Сред(СтрНачало, 4, 2));
		СтрНачалоСекунды = Число(Сред(СтрНачало, 7, 2));
		СтрНачалоВсего = СтрНачалоЧасы * 3600 + СтрНачалоМинуты * 60 + СтрНачалоСекунды;
		
		СтрКонецЧасы = Число(Лев(СтрКонец, 2));
		СтрКонецМинуты = Число(Сред(СтрКонец, 4, 2));
		СтрКонецСекунды = Число(Сред(СтрКонец, 7, 2));
		СтрКонецВсего = СтрКонецЧасы * 3600 + СтрКонецМинуты * 60 + СтрКонецСекунды;
	Исключение
		Сообщить("Передано СтрНачало = " + СтрНачало);
		Сообщить("Передано СтрКонец = " + СтрКонец);
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат СтрКонецВсего - СтрНачалоВсего;
КонецФункции

Функция ПолучитьСтанок(Знач КодОборудования, Знач УчастокОборудования)
	СтанокСсылка = Справочники.Оборудование.ПустаяСсылка();
	
	Попытка 
		КодОборудования = Строка(КодОборудования); 
	Исключение 
	КонецПопытки;	
	
	Если ТипЗнч(КодОборудования) = Тип("Строка") Тогда
		Запрос = Новый Запрос( 
		"ВЫБРАТЬ
		|	ОборудованиеСпр.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Оборудование КАК ОборудованиеСпр
		|ГДЕ
		|	ОборудованиеСпр.Код = &КодОборудования
		|	И ОборудованиеСпр.Участок = &УчастокОборудования");	
		Запрос.УстановитьПараметр("КодОборудования", КодОборудования);
		Запрос.УстановитьПараметр("УчастокОборудования", УчастокОборудования);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтанокСсылка = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтанокСсылка;
КонецФункции

Функция ПолучитьФункциюОбработки(Знач Оборудование)
	ФункцияОбработки = Перечисления.ФункцииОбработкиЛогФайлов.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Оборудование.Участок) И ЗначениеЗаполнено(Оборудование.МодельОборудования) Тогда
		Запрос = Новый Запрос( 
		"ВЫБРАТЬ
		|	ОбработкаLOG_ФайловСписокМоделей.Ссылка.Функция КАК Функция
		|ИЗ
		|	Справочник.ОбработкаLOG_Файлов.СписокМоделей КАК ОбработкаLOG_ФайловСписокМоделей
		|ГДЕ
		|	ОбработкаLOG_ФайловСписокМоделей.МодельОборудования = &МодельОборудования
		|	И ОбработкаLOG_ФайловСписокМоделей.Ссылка.Участок = &Участок");		
		Запрос.УстановитьПараметр("МодельОборудования", Оборудование.МодельОборудования);
		Запрос.УстановитьПараметр("Участок", Оборудование.Участок);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ФункцияОбработки = Выборка.Функция;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФункцияОбработки;
КонецФункции

Функция ПолучитьПлатМульт(Знач НП)	
	ПлатМульт = 1;
	
	Если ЗначениеЗаполнено(НП) Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТехпроцессыВертикали.Мультизаготовка КАК Мультизаготовка,
		|	ТехпроцессыВертикали.КолвоМультизаготовок КАК ПлатМульт
		|ИЗ
		|	Справочник.ТехпроцессыВертикали КАК ТехпроцессыВертикали
		|ГДЕ
		|	ТехпроцессыВертикали.Дсе = &Плата
		|	И ТехпроцессыВертикали.Расчётный = 1");
		Запрос.УстановитьПараметр("Плата", НП);
		Выборка = Запрос.Выполнить().Выбрать();	
		Если Выборка.Следующий() Тогда
			Если Выборка.ПлатМульт <> 0 Тогда			
				ПлатМульт = Выборка.ПлатМульт;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	Возврат ПлатМульт; 
Конецфункции

Функция ПолучитьНП_ИзХранилищаУП(Знач Наименование, Знач Расширение = "", Знач ЭтоПлата = Ложь)
	НайдПлата = Справочники.НП.ПустаяСсылка();
	
	Если Не ПустаяСтрока(Наименование) Тогда
		Пока Найти(Наименование, "/") > 0 Цикл 
			Наименование = Прав(Наименование, СтрДлина(Наименование) - Найти(Наименование, "/")); 
		КонецЦикла;
		
		Если Найти(Наименование, "_") > 0 Тогда
			Наименование = Лев(Наименование, Найти(Наименование, "_") - 1);
		КонецЕсли;
		
		Если Найти(Наименование, "-") > 0 Тогда
			Наименование = Лев(Наименование, Найти(Наименование, "-") - 1);
		КонецЕсли;	
		
		Если Сред(Наименование, 3, 1) = "." Тогда
			Наименование = Лев(Наименование, 2) + Прав(Наименование, СтрДлина(Наименование) - 3);
		КонецЕсли;
		
		Запрос = Новый Запрос( 
		"ВЫБРАТЬ
		|	ХранилищеУПДокументы.Ссылка.Дсе КАК НП
		|ИЗ
		|	Справочник.ХранилищеУП.Документы КАК ХранилищеУПДокументы
		|ГДЕ
		|	ХранилищеУПДокументы.Файл.Наименование ПОДОБНО &Наименование
		|	И ВЫБОР
		|			КОГДА &ИспользоватьРасширение
		|				ТОГДА ХранилищеУПДокументы.Файл.Расширение = &Расширение
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ЭтоПлата
		|				ТОГДА ХранилищеУПДокументы.Ссылка.Дсе.Плата
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ");
		Запрос.УстановитьПараметр("Наименование", "%" + Наименование + "%");
		Запрос.УстановитьПараметр("ИспользоватьРасширение", ЗначениеЗаполнено(Расширение));
		Запрос.УстановитьПараметр("Расширение", Расширение);
		Запрос.УстановитьПараметр("ЭтоПлата", ЭтоПлата);
		
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() = 1 Тогда
			НайдПлата = Результат[0].НП;
		ИначеЕсли Результат.Количество() > 1 Тогда
			Для Каждого стр Из Результат Цикл 
				Если ПолучитьЗаказНаПроизводствоПП(стр.НП).Ссылка <> Документы.ЗаказНаПроизводствоПП.ПустаяСсылка() Тогда
					НайдПлата = стр.НП;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НайдПлата = Справочники.НП.ПустаяСсылка() Тогда
				НайдПлата = Результат[0].НП;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НайдПлата;
КонецФункции

Функция ПолучитьНП_ПоКоду(Знач Код)
	НайдПлата = Справочники.НП.ПустаяСсылка();
	
	Если Не ПустаяСтрока(Код) Тогда
		Пока Найти(Код, "/") > 0 Цикл 
			Код = Прав(Код, СтрДлина(Код) - Найти(Код, "/")); 
		КонецЦикла;
		
		Пока Найти(Код, ".") > 0 Цикл 
			Код = СтрЗаменить(Код, ".", ""); 
		КонецЦикла;
		
		Если Найти(Код, "_") > 0 Тогда
			Код = Лев(Код, Найти(Код, "_") - 1);
		КонецЕсли;
		
		Если Найти(Код, "-") > 0 Тогда
			Код = Лев(Код, Найти(Код, "-") - 1);
		КонецЕсли;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НП.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НП КАК НП
		|ГДЕ
		|	НП.Код ПОДОБНО &Код");
		Запрос.УстановитьПараметр("Код", "%" + Код + "%");
		Результат = Запрос.Выполнить().Выгрузить();
		
		Если Результат.Количество() = 1 Тогда
			НайдПлата = Результат[0].Ссылка;
		ИначеЕсли Результат.Количество() > 1 Тогда
			Для Каждого стр Из Результат Цикл 
				Если ПолучитьЗаказНаПроизводствоПП(стр.Ссылка).Ссылка <> Документы.ЗаказНаПроизводствоПП.ПустаяСсылка() Тогда
					НайдПлата = стр.Ссылка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НайдПлата = Справочники.НП.ПустаяСсылка() Тогда
				НайдПлата = Результат[0].Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НайдПлата;
Конецфункции

Функция ПолучитьНП(Знач Наименование)
	НайдПлата = Справочники.НП.ПустаяСсылка();
	
	Если Найти(Наименование, "_") > 0 Тогда
		Наименование = Лев(Наименование, Найти(Наименование, "_") - 1);
	КонецЕсли;
	
	Если Сред(Наименование, 3, 1) = "." Тогда
		Наименование = Лев(Наименование, 2) + Прав(Наименование, СтрДлина(Наименование) - 3);
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НП.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НП КАК НП
	|ГДЕ
	|	НП.Наименование ПОДОБНО &Наименование");
	Запрос.УстановитьПараметр("Наименование", "%" + Наименование + "%");
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 1 Тогда
		НайдПлата = Результат[0].НП;
	ИначеЕсли Результат.Количество() > 1 Тогда
		Для Каждого стр Из Результат Цикл 
			Если ПолучитьЗаказНаПроизводствоПП(стр.НП).Ссылка <> Документы.ЗаказНаПроизводствоПП.ПустаяСсылка() Тогда
				НайдПлата = стр.НП;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НайдПлата = Справочники.НП.ПустаяСсылка() Тогда
			НайдПлата = Результат[0].НП;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НайдПлата;
Конецфункции

Функция ПолучитьВремяНа100(Знач ТП, Знач Операция)
	ВремяНа100 = 0;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТехПроцессыМаршрут.Операция.Ссылка КАК ОперацияСсылка,
	|	ТехПроцессыМаршрут.Операция.Время КАК ОперацияВремя
	|ИЗ
	|	Справочник.ТехПроцессы.Маршрут КАК ТехПроцессыМаршрут
	|ГДЕ
	|	ТехПроцессыМаршрут.Ссылка = &ТП
	|	И ТехПроцессыМаршрут.Операция.Код = &ОперацияКод");
	Запрос.УстановитьПараметр("ТП", ТП);
	Запрос.УстановитьПараметр("ОперацияКод", Операция);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВремяНа100 = Выборка.ОперацияВремя;
	КонецЕсли;
	
	Возврат ВремяНа100;
Конецфункции

Функция ПолучитьЗаказНаПроизводствоПП(Знач ДСЕ)	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ЗаказНаПроизводствоПП.Ссылка, ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводствоПП.ПустаяСсылка)) КАК Ссылка,
	|	ЕСТЬNULL(ЗаказНаПроизводствоПП.Ссылка.Номер, """") КАК Номер,
	|	ЕСТЬNULL(ЗаказНаПроизводствоПП.Ссылка.КолвоМультизаг, 1) КАК КолвоМультизаг,
	|	ЕСТЬNULL(ЗаказНаПроизводствоПП.Ссылка.КарточкаТП, ЗНАЧЕНИЕ(Справочник.ТехПроцессы.ПустаяСсылка)) КАК КарточкаТП
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ЗаказНаПроизводствоПП.Ссылка.Номер) КАК Номер
	|	ИЗ
	|		Документ.ЗаказНаПроизводствоПП КАК ЗаказНаПроизводствоПП
	|	ГДЕ
	|		ЗаказНаПроизводствоПП.ДСЕ = &ДСЕ
	|		И ЗаказНаПроизводствоПП.ДСЕ <> ЗНАЧЕНИЕ(Справочник.НП.ПустаяСсылка)
	|		И НЕ ЗаказНаПроизводствоПП.ПометкаУдаления) КАК ПоследнийЗаказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводствоПП КАК ЗаказНаПроизводствоПП
	|		ПО (ЗаказНаПроизводствоПП.Ссылка.Номер = ПоследнийЗаказ.Номер)");
	Запрос.УстановитьПараметр("ДСЕ", ДСЕ);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка;
Конецфункции

Функция ПолучитьНазваниеОперации(Знач ИмяПрограммы, Знач НП)
	Операция = "";
	
	Если ПустаяСтрока(НП) Тогда
		Возврат Операция;
	Иначе
		МассивДопустимыхМасок = Новый СписокЗначений();	
		Если Найти(ИмяПрограммы, "_m") Тогда
			// "сверлильная метали"
			МассивДопустимыхМасок.Добавить("230%");
			МассивДопустимыхМасок.Добавить("235%");
			МассивДопустимыхМасок.Добавить("240%");
			МассивДопустимыхМасок.Добавить("225%");
		ИначеЕсли Найти(ИмяПрограммы, "_nm") или Найти(ИмяПрограммы, "sv_per") или Найти(ИмяПрограммы, "sv per") Тогда
			// "сверлильная неметали"
			МассивДопустимыхМасок.Добавить("375%"); 
			МассивДопустимыхМасок.Добавить("380%");
			МассивДопустимыхМасок.Добавить("385%");
		ИначеЕсли Найти(ИмяПрограммы, "_fz") Тогда
			// "фрезеровка"
			МассивДопустимыхМасок.Добавить("540%");
			МассивДопустимыхМасок.Добавить("535%");
		ИначеЕсли Найти(ИмяПрограммы, "_zenk") Тогда
			// "зенковка"
			МассивДопустимыхМасок.Добавить("245%");
			МассивДопустимыхМасок.Добавить("395%");	
		ИначеЕсли Найти(ИмяПрограммы, "_detR") Тогда
			// "глухих"
			МассивДопустимыхМасок.Добавить("265%");
			МассивДопустимыхМасок.Добавить("250%");
		КонецЕсли;	
		
		Для Каждого ст из МассивДопустимыхМасок Цикл 
			Операция = УточнитьНомерОперации(НП, ст.Значение);
			Если Операция = "" Тогда
				
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Операция;
	КонецЕсли;
КонецФункции

Функция ПолучитьНазваниеОперацииПоКлючевымОперациям(Знач ИмяПрограммы, Знач ЗаказНаПроизводствоПП, Знач МоделиОборудования)
	Операция = "";
	Если ПустаяСтрока(ЗаказНаПроизводствоПП) Или ПустаяСтрока(ИмяПрограммы) Тогда
		
	Иначе
		ВидОперации = Справочники.ВидыСтандартныхОпераций.ПустаяСсылка();
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НаборПризнаков.Ссылка КАК ВидОперации,
		|	НаборПризнаков.Признак КАК Признак
		|ИЗ
		|	Справочник.ВидыСтандартныхОпераций.НаборПризнаков КАК НаборПризнаков");
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			Если Найти(ВРег(ИмяПрограммы), ВРег(Выборка.Признак)) > 0 Тогда
				ВидОперации = Выборка.ВидОперации;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ВидОперации <> Справочники.ВидыСтандартныхОпераций.ПустаяСсылка() Тогда	
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	КлючевыеОперации.Опр КАК Опр
			|ИЗ
			|	Документ.ЗаказНаПроизводствоПП.КлючевыеОперации КАК КлючевыеОперации
			|ГДЕ
			|	КлючевыеОперации.Ссылка = &ЗаказНаПроизводствоПП
			|	И КлючевыеОперации.Опр.ВидОперации = &ВидОперации
			//	|	И КлючевыеОперации.Опр.ОборудованиеНовое.МодельОборудования В(&МоделиОборудования)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Опр
			|АВТОУПОРЯДОЧИВАНИЕ");
			Запрос.УстановитьПараметр("ЗаказНаПроизводствоПП", ЗаказНаПроизводствоПП);
			Запрос.УстановитьПараметр("ВидОперации", ВидОперации);
			//	Запрос.УстановитьПараметр("МоделиОборудования", МоделиОборудования);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Операция = Лев(Выборка.Опр.Наименование, 5);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Операция;
КонецФункции

Функция УточнитьНомерОперации(Знач НП, Знач Маска)
	Запрос = Новый Запрос( 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	техпроцессы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ врем
	|ИЗ
	|	Справочник.ТехПроцессы КАК техпроцессы
	|ГДЕ
	|	техпроцессы.НП = &НП
	|	И техпроцессы.Утвержден123
	|	И техпроцессы.СтатусТП = ЗНАЧЕНИЕ(Перечисление.СтатусТП.Действующий)
	|	И техпроцессы.ЗапускающийУчасток.Владелец = &Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врем.Ссылка КАК Ссылка,
	|	ТехПроцессыМаршрут.Номер КАК Номер,
	|	ТехПроцессыМаршрут.Наименование КАК Наименование
	|ИЗ
	|	врем КАК врем
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехПроцессы.Маршрут КАК ТехПроцессыМаршрут
	|		ПО врем.Ссылка = ТехПроцессыМаршрут.Ссылка
	|			И (ТехПроцессыМаршрут.Номер ПОДОБНО &Маска)");
	Запрос.УстановитьПараметр("НП", НП);
	Запрос.УстановитьПараметр("Маска", Маска);
	Запрос.УстановитьПараметр("Владелец", Станок.Участок.Владелец);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Номер;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

//	************	Методы заполнения Контрольных Карт
Функция СохранитьНовыйФайл(Знач МассивСтрок, Знач НазваниеФайла, Знач ФункцияОбработки)
	ВременныйКаталог = КаталогВременныхФайлов() + "stanki-log\";
	СоздатьКаталог(ВременныйКаталог);
	ПутьВременногоФайла = ВременныйКаталог + НазваниеФайла;
	Текст = Новый ЗаписьТекста(ПутьВременногоФайла, КодировкаТекста.UTF8);
	Для Каждого стр из МассивСтрок Цикл 
		Текст.ЗаписатьСтроку(стр);
	КонецЦикла;
	Текст.Закрыть();
	
	СпрФайл = Справочники.ХранилищеФайловКд.СоздатьЭлемент();
	СпрФайл.Источник = ПутьВременногоФайла;
	СпрФайл.Тип = СпрФайл.СоответствиеТипЗаписи.Получить(ФункцияОбработки);
	СпрФайл.Записать();	
	
	Возврат СпрФайл;
КонецФункции

Процедура ЗаполнитьКонтрольнуюКарту(ОбъектКонтрольнаяКарта, Знач Станок, Знач ФайлХранилища, Знач ТекущаяДата = Неопределено)	
	Позиции = "";
	Колво = 0;
	
	ОбъектКонтрольнаяКарта.ДСЕ.Очистить();
	ОбъектКонтрольнаяКарта.ДСЕавтомат.Очистить();
	ОбъектКонтрольнаяКарта.Смены.Очистить();
	ОбъектКонтрольнаяКарта.КолвоЧасов = 0;
	
	Для Каждого Стр Из Станок.РежимРаботы.Выгрузить() Цикл
		ЗаполнитьЗначенияСвойств(ОбъектКонтрольнаяКарта.Смены.Добавить(), Стр);
		ОбъектКонтрольнаяКарта.КолвоЧасов = ОбъектКонтрольнаяКарта.КолвоЧасов + Стр.ВремяРаботы;
	КонецЦикла;
	
	Если ТекущаяДата = Неопределено Тогда
		ОбъектКонтрольнаяКарта.Дата = Дата(Прав(ФайлХранилища.Наименование, 8));
	Иначе
		ОбъектКонтрольнаяКарта.Дата = ТекущаяДата;
	КонецЕсли;
	ОбъектКонтрольнаяКарта.Оборудование = Станок;
	ОбъектКонтрольнаяКарта.ВидРабот = Станок.ВидРабот;
	ОбъектКонтрольнаяКарта.КолвоСмен = ОбъектКонтрольнаяКарта.Смены.Количество();
	ОбъектКонтрольнаяКарта.Участок = Станок.Участок;
	ОбъектКонтрольнаяКарта.Статус = 1;	
	ОбъектКонтрольнаяКарта.ЛогФайл = ФайлХранилища.Ссылка;
	
	Для Каждого Стр Из ТаблицаПрограмм Цикл
		НоваяДСЕ = ОбъектКонтрольнаяКарта.ДСЕ.Добавить();
		НоваяДСЕ.НП = Стр.ПечатнаяПлата;
		//
		МинутыВремяС = Цел(Стр.СекундНаОднуПлату / 60);
		СекундыВремяС = Стр.СекундНаОднуПлату - МинутыВремяС * 60;
		МинутыВремяС = Строка(Цел(МинутыВремяС));
		СекундыВремяС = Строка(Цел(СекундыВремяС));
		Если СтрДлина(МинутыВремяС) = 0 Тогда
			МинутыВремяС = "00";
		КонецЕсли;	
		Если СтрДлина(МинутыВремяС) = 1 Тогда
			МинутыВремяС = "0" + МинутыВремяС;
		КонецЕсли;
		Если СтрДлина(СекундыВремяС) = 0 Тогда
			СекундыВремяС = "00";
		КонецЕсли;		
		Если СтрДлина(СекундыВремяС) = 1 Тогда
			СекундыВремяС = "0" + СекундыВремяС;
		КонецЕсли;
		НоваяДСЕ.ВремяС = "0001010100" + МинутыВремяС + СекундыВремяС;
		//
		НоваяДСЕ.ВремяФакт = Окр(Стр.ВремяРеальное / 60);
		НоваяДСЕ.Смена = Стр.Смена;
		//
		ЗаказНаПроизводствоПП = ПолучитьЗаказНаПроизводствоПП(НоваяДСЕ.НП);
		Если ЗаказНаПроизводствоПП.Ссылка = Документы.ЗаказНаПроизводствоПП.ПустаяСсылка() Тогда
			НоваяДСЕ.КолвоПлан = Стр.Количество * Стр.ПлатМульт;
			НоваяДСЕ.КолвоГодных = Стр.Количество * Стр.ПлатМульт;
			НоваяДСЕ.Операция = ПолучитьНазваниеОперации(Стр.ИмяПрограммы, НоваяДСЕ.НП);		
		Иначе
			НоваяДСЕ.КолвоПлан = Стр.Количество * ЗаказНаПроизводствоПП.КолвоМультизаг;
			НоваяДСЕ.КолвоГодных = Стр.Количество * ЗаказНаПроизводствоПП.КолвоМультизаг;	
			НоваяДСЕ.Примечание = ЗаказНаПроизводствоПП.Номер;
			НоваяДСЕ.Операция = ПолучитьНазваниеОперацииПоКлючевымОперациям(Стр.ИмяПрограммы, ЗаказНаПроизводствоПП.Ссылка, МоделиОборудования);	
			НоваяДСЕ.Время = 60 * ПолучитьВремяНа100(ЗаказНаПроизводствоПП.КарточкаТП, НоваяДСЕ.Операция) * НоваяДСЕ.КолвоПлан / 100;
		КонецЕсли;
		
		Если НоваяДСЕ.КолвоПлан > 0 Тогда
			НоваяДСЕ.СреднееВремя = НоваяДСЕ.ВремяФакт / НоваяДСЕ.КолвоПлан;
		КонецЕсли;
		
		//	***	28.03.2019 костыль чтобы определить на какие платы не привязаны программы
		Если Прав(Стр.Изделие, 3) = "!!!" Тогда
			НоваяДСЕ.КолвоПрутка = -1;
		КонецЕсли;
		
		Позиции = Позиции + Стр.ИмяПрограммы + "; ";
		Колво = Колво + НоваяДСЕ.КолвоГодных;
	КонецЦикла;
	НоваяДСЕавтомат = ОбъектКонтрольнаяКарта.ДСЕавтомат.Добавить();
	НоваяДСЕавтомат.Смена = 1;
	НоваяДСЕавтомат.Колво = Колво;
	НоваяДСЕавтомат.Машинное = Окр(ВремяРеальное / 60);
	НоваяДСЕавтомат.Фактическое = Окр(ВремяФактическое / 60);
	НоваяДСЕавтомат.Простой = Окр(ВремяПростоя / 60);
	
	НайдСмена = ОбъектКонтрольнаяКарта.Смены.Найти(Смена, "Смена");
	Если НайдСмена <> Неопределено Тогда	
		НоваяДСЕавтомат.Выкл = Окр((НайдСмена.ВремяРаботы * 3600 - ВремяФактическое - ВремяПростоя) / 60);	
		Если НоваяДСЕавтомат.Выкл < 0 Тогда
			НоваяДСЕавтомат.Выкл = 0;
		КонецЕсли;
	КонецЕсли;
	НоваяДСЕавтомат.Позиции = Позиции;
	
	ОбъектКонтрольнаяКарта.ПересчетМашинногоВремени(Ложь);
КонецПроцедуры

//	************	СВЕРЛИЛЬНАЯ MIVA и LM2_99998
Процедура ОбойтиФайлСверлильная(Знач Файл)	
	Текст = Новый ЧтениеТекста(Файл.ПолноеИмя, КодировкаТекста.UTF8);
	
	СтрокиПрограммы = Новый Массив;
	СтрокаФайла = "";
	НомерПрограммы = 0;
	ВремяВключенияСтанка = "";
	ВремяОтключенияСтанка = "";
	ПоследняяСтрока = "";
	Пока СтрокаФайла <> Неопределено Цикл
		СтрокаФайла = Текст.ПрочитатьСтроку();
		ВремяОтключенияСтанка = ?(СтрокаФайла = Неопределено, ВремяОтключенияСтанка, Лев(СтрокаФайла, 8));	// Время из последней строки
		Если Найти(СтрокаФайла, "POWER ON") И ВремяВключенияСтанка = "" Тогда
			СтрокиПрограммы.Добавить(СтрокаФайла);
			Лог("> " + СтрокаФайла);
			ВремяВключенияСтанка = Лев(СтрокаФайла, 8);	// Время из первой строки
		ИначеЕсли Найти(СтрокаФайла, "Program:") Или СтрокаФайла = Неопределено Тогда
			Если СтрокиПрограммы.Количество() <> 0 Тогда
				ПросмотретьЛогНайденнойПрограммы(СтрокиПрограммы);
				Для Каждого стр из СтрокиПрограммы Цикл 
					СтрокиДляСохраненияФайла.Добавить(стр);
				КонецЦикла;
				СтрокиПрограммы.Очистить();
			КонецЕсли;
			Если СтрокаФайла <> Неопределено Тогда
				СтрокиПрограммы.Добавить(СтрокаФайла);
				НомерПрограммы = НомерПрограммы + 1;
				Лог("# " + НомерПрограммы);
				Лог("> " + СтрокаФайла);
			КонецЕсли;
		Иначе
			СтрокиПрограммы.Добавить(СтрокаФайла);
		КонецЕсли;
	КонецЦикла;  
	
	ВремяРаботы = ПолучитьРазницуМеждуСтроками(ВремяОтключенияСтанка, ВремяВключенияСтанка);
	ВремяПростоя = ВремяРаботы - ВремяФактическое;
КонецПроцедуры

Процедура ПросмотретьЛогНайденнойПрограммы(Знач СтрокиПрограммы)
	ВремяНачалаРаботыПрограммы = Лев(СтрокиПрограммы[0], 8);
	//	***	условие для случая, когда станок работает после 00 и логи начинают записываться в файл следующего дня (без POWER ON)
	Если Найти(ВремяНачалаРаботыПрограммы, "# T") > 0 Тогда
		ВремяНачалаРаботыПрограммы = Лев(СтрокиПрограммы[1], 8);
	КонецЕсли;
	
	ВремяПоследейСтроки = Лев(СтрокиПрограммы[СтрокиПрограммы.Количество() - 1], 8);
	КоличествоПрогонок = 0;
	КоличествоЗначащихПрогонок = 0;
	МассивСтрокЗначащейПрогонки = Новый Массив;	
	НомерСтроки = 0;
	Для Каждого Строка Из СтрокиПрограммы Цикл
		НомерСтроки = НомерСтроки + 1;
		
		Если Найти(Строка, "POWER ON") > 0 Или Найти(Строка, "+ ?? 00 S50_1000") > 0 Тогда	// Прогрев станка (первая программа) 
			ВремяНачалаРаботыПрограммы = Лев(СтрокиПрограммы[1], 8);
			Прервать;
		Иначе 
			Если Найти(Строка, "TMSDAT") > 0 Тогда
				МассивСтрокЗначащейПрогонки.Добавить(Строка);
			КонецЕсли;
			
			//	*** Program end: - для LM2_99998
			Если Найти(Строка, "PROGRAM_END") > 0 Или Найти(Строка, "STOPKEY") > 0 Или Найти(Строка, "Program end:") > 0 Тогда
				ВремяОкончанияРаботы = Лев(Строка, 8);	// Время последнего завершения программы
				КоличествоПрогонок = КоличествоПрогонок + 1;
				Если МассивСтрокЗначащейПрогонки.Количество() > 0 Тогда
					КоличествоЗначащихПрогонок = КоличествоЗначащихПрогонок + 1;
				КонецЕсли;
				МассивСтрокЗначащейПрогонки.Очистить();
			КонецЕсли;
		КонецЕсли; 	
	КонецЦикла;
	ВремяОкончанияРаботы = ?(ВремяОкончанияРаботы = Неопределено, ВремяПоследейСтроки, ВремяОкончанияРаботы); 
	ВремяФактическое = ВремяФактическое + ПолучитьРазницуМеждуСтроками(ВремяОкончанияРаботы, ВремяНачалаРаботыПрограммы);
	
	Если КоличествоЗначащихПрогонок > 0 Тогда
		НоваяПрограмма = ТаблицаПрограмм.Добавить();
		НоваяПрограмма.Номер = ТаблицаПрограмм.Количество();
		НоваяПрограмма.Смена = 1;
		НоваяПрограмма.Количество = КоличествоЗначащихПрогонок;
		
		НоваяПрограмма.ВремяНачалаРаботы = ПолучитьРазницуМеждуСтроками(СтрокиПрограммы[0]);	
		НоваяПрограмма.ВремяОкончанияРаботы = ПолучитьРазницуМеждуСтроками(ВремяОкончанияРаботы);		
		НоваяПрограмма.ВремяРеальное = НоваяПрограмма.ВремяОкончанияРаботы - НоваяПрограмма.ВремяНачалаРаботы;			
		
		СтрокаЗапускаПрограммы = Прав(СтрокиПрограммы[0], СтрДлина(СтрокиПрограммы[0]) - Найти(СтрокиПрограммы[0], ":/") - 1);
		НоваяПрограмма.Изделие = Лев(СтрокаЗапускаПрограммы, Найти(СтрокаЗапускаПрограммы, "/") - 1);	
		
		Пока Найти(СтрокаЗапускаПрограммы, "/") > 0 Цикл 
			СтрокаЗапускаПрограммы = Прав(СтрокаЗапускаПрограммы, СтрДлина(СтрокаЗапускаПрограммы) - Найти(СтрокаЗапускаПрограммы, "/")); 
		КонецЦикла;
		НоваяПрограмма.ИмяПрограммы = СтрокаЗапускаПрограммы;	
		
		Если Найти(НоваяПрограмма.ИмяПрограммы, "Program") > 0 И Найти(НоваяПрограмма.ИмяПрограммы, "started") > 0 Тогда
			//	***	для LM2_99998
			НоваяПрограмма.ИмяПрограммы = Прав(НоваяПрограмма.ИмяПрограммы, СтрДлина(НоваяПрограмма.ИмяПрограммы) - Найти(НоваяПрограмма.ИмяПрограммы, "Program") - 7);
			НоваяПрограмма.ИмяПрограммы = Лев(НоваяПрограмма.ИмяПрограммы, Найти(НоваяПрограмма.ИмяПрограммы, "started") - 2);
		Иначе
			//Сообщить("СтрокаЗапускаПрограммы " + СтрокаЗапускаПрограммы); 
			Если Найти(СтрокаЗапускаПрограммы, "_") > 0 Тогда
				ТекстПоискаПлаты = Лев(СтрокаЗапускаПрограммы, Найти(СтрокаЗапускаПрограммы, "_") - 1);	
			ИначеЕсли Найти(СтрокаЗапускаПрограммы, "-") > 0 Тогда
				ТекстПоискаПлаты = Лев(СтрокаЗапускаПрограммы, Найти(СтрокаЗапускаПрограммы, "-") - 1);	
			ИначеЕсли Найти(СтрокаЗапускаПрограммы, " ") > 0 Тогда
				ТекстПоискаПлаты = Лев(СтрокаЗапускаПрограммы, Найти(СтрокаЗапускаПрограммы, " ") - 1);	
			Иначе
				ТекстПоискаПлаты = Лев(ВРег(СтрокаЗапускаПрограммы), Найти(ВРег(СтрокаЗапускаПрограммы), "I") - 1);			
			КонецЕсли;
			//Сообщить("ТекстПоискаПлаты = " + ТекстПоискаПлаты);
			
			НоваяПрограмма.ПечатнаяПлата = ПолучитьНП_ИзХранилищаУП(ТекстПоискаПлаты, , Истина);
			
			Если НоваяПрограмма.ПечатнаяПлата = Справочники.НП.ПустаяСсылка() Тогда
				ТекстПоискаПлаты = Лев(ВРег(СтрокаЗапускаПрограммы), Найти(ВРег(СтрокаЗапускаПрограммы), "I") - 1);
				НоваяПрограмма.ПечатнаяПлата = ПолучитьНП_ПоКоду(ТекстПоискаПлаты);
				//	***	28.03.2019 добавлено чтобы определить на какие платы не привязаны программы
				НоваяПрограмма.Изделие = НоваяПрограмма.Изделие + " !!!";
			КонецЕсли;
			
			//Сообщить("для " + СтрокаЗапускаПрограммы + " нашли " + НоваяПрограмма.ПечатнаяПлата);		
			//Сообщить("==========");			
		КонецЕсли;
		
		НоваяПрограмма.ПлатМульт = ПолучитьПлатМульт(НоваяПрограмма.ПечатнаяПлата);		
		//Сообщить(НоваяПрограмма.ПечатнаяПлата);
		НоваяПрограмма.СекундНаОднуПлату = Окр(НоваяПрограмма.ВремяРеальное / (НоваяПрограмма.Количество * НоваяПрограмма.ПлатМульт), 1);
		НоваяПрограмма.ПлатВЧас = Окр(3600 / НоваяПрограмма.СекундНаОднуПлату, 1);
		
		ВремяРеальное = ВремяРеальное + НоваяПрограмма.ВремяРеальное;
	КонецЕсли;	
КонецПроцедуры

Процедура ОбойтиФайлСверлильнаяLM2_99998(Знач Файл)	
	Текст = Новый ЧтениеТекста(Файл.ПолноеИмя, КодировкаТекста.UTF8);
	
	СтрокиПрограммы = Новый Массив;
	СтрокаФайла = "";
	НомерПрограммы = 0;
	ВремяВключенияСтанка = "";
	ВремяОтключенияСтанка = "";
	ПоследняяСтрока = "";
	Пока СтрокаФайла <> Неопределено Цикл
		СтрокаФайла = Текст.ПрочитатьСтроку();
		ВремяОтключенияСтанка = ?(СтрокаФайла = Неопределено, ВремяОтключенияСтанка, Лев(СтрокаФайла, 8));	// Время из последней строки
		Если ( Найти(СтрокаФайла, "POWER ON") Или Найти(СтрокаФайла, "+ ?? 00 S50_1000") ) И ВремяВключенияСтанка = "" Тогда	//	29.03.2019 добавили "+ ?? 00 S50_1000" т.к. "power on" отсутствует в логах
			СтрокиПрограммы.Добавить(СтрокаФайла);
			Лог("> " + СтрокаФайла);
			ВремяВключенияСтанка = Лев(СтрокаФайла, 8);	// Время из первой строки
		ИначеЕсли ( Найти(СтрокаФайла, "Program") > 0 И Найти(СтрокаФайла, "started") > 0 ) Или СтрокаФайла = Неопределено Тогда
			Если СтрокиПрограммы.Количество() <> 0 Тогда
				ПросмотретьЛогНайденнойПрограммы(СтрокиПрограммы);
				Для Каждого стр из СтрокиПрограммы Цикл 
					СтрокиДляСохраненияФайла.Добавить(стр);
				КонецЦикла;
				СтрокиПрограммы.Очистить();
			КонецЕсли;
			Если СтрокаФайла <> Неопределено Тогда
				СтрокиПрограммы.Добавить(СтрокаФайла);
				НомерПрограммы = НомерПрограммы + 1;
				Лог("# " + НомерПрограммы);
				Лог("> " + СтрокаФайла);
			КонецЕсли;
		Иначе
			СтрокиПрограммы.Добавить(СтрокаФайла);
		КонецЕсли;
	КонецЦикла;  
	
	//для алгоритма LM2_99998 нужно свернуть и пересчитать СекундНаОднуПлату и ПлатВЧас + находим НП для свернутых данных
	ТаблицаПрограмм.Свернуть("Изделие, ПечатнаяПлата, ИмяПрограммы, ПлатМульт, Смена", "Номер, Количество, ВремяНачалаРаботы, ВремяОкончанияРаботы, ВремяРеальное, СекундНаОднуПлату, ПлатВЧас");
	Для Каждого стр из ТаблицаПрограмм Цикл
		стр.ПечатнаяПлата = ПолучитьНП_ИзХранилищаУП(стр.ИмяПрограммы, , Истина);
		
		Если стр.ПечатнаяПлата = Справочники.НП.ПустаяСсылка() Тогда
			//Сообщить("стр.ИмяПрограммы " + стр.ИмяПрограммы);
			ТекстПоискаПлаты = Лев(ВРег(стр.ИмяПрограммы), Найти(ВРег(стр.ИмяПрограммы), "I") - 1);
			//Сообщить("ТекстПоискаПлаты " + ТекстПоискаПлаты);
			стр.ПечатнаяПлата = ПолучитьНП_ПоКоду(ТекстПоискаПлаты);
			//	***	28.03.2019 костыль чтобы определить на какие платы не привязаны программы
			стр.Изделие = стр.Изделие + " !!!";
		КонецЕсли;
		стр.ПлатМульт = ПолучитьПлатМульт(стр.ПечатнаяПлата);				
		//Сообщить("стр.ПлатМульт = " + стр.ПлатМульт);
		стр.СекундНаОднуПлату = Окр(стр.ВремяРеальное / (стр.Количество * стр.ПлатМульт), 1);
		стр.ПлатВЧас = Окр(3600 / стр.СекундНаОднуПлату, 1);	
	КонецЦикла;
	
	ВремяРаботы = ПолучитьРазницуМеждуСтроками(ВремяОтключенияСтанка, ВремяВключенияСтанка);
	ВремяПростоя = ВремяРаботы - ВремяФактическое;
КонецПроцедуры

//	************	СВЕРЛИЛЬНАЯ POSALUX
Процедура ОбойтиФайлСверлильнаяПозалюкс(Знач Файл)
	ДатаДляОбработки = Дата(Сред(Файл.Имя, 3, 8));
	Текст = Новый ЧтениеТекста(Файл.ПолноеИмя, КодировкаТекста.UTF8);
	СтрокиПрограммы = Новый Массив;
	СтрокаФайла = "";
	НомерПрограммы = 0;
	ВремяВключенияСтанка = "";
	ВремяОтключенияСтанка = "";
	ПоследняяСтрока = "";
	ФлагНайденногоДня = Ложь;
	
	Пока СтрокаФайла <> Неопределено Цикл
		СтрокаФайла = Текст.ПрочитатьСтроку();
		//Лог(СтрокаФайла);
		Если СтрокаФайла = Неопределено Тогда
			
		Иначе
			СтрокаФайла = СокрЛП(СтрокаФайла);
			Если ФлагНайденногоДня и СтрокаФайла <> Неопределено Тогда
				СтрокиПрограммы.Добавить(СтрокаФайла);
				ВремяОтключенияСтанка = Лев(СтрокаФайла, 8);	// Время из последней строки
				Лог("> " + СтрокаФайла);
			КонецЕсли;
			
			Если Найти(СтрокаФайла, "Revision 070113 booted on " + Лев(Строка(ДатаДляОбработки), 6) + Прав(Строка(Год(ДатаДляОбработки)), 2)) > 0 Тогда
				СтрокиПрограммы.Добавить(СтрокаФайла);				
				ФлагНайденногоДня = Истина;
				ВремяВключенияСтанка = Лев(СтрокаФайла, 8);
				Лог("> " + СтрокаФайла);	
			КонецЕсли;
			
			Если Найти(СтрокаФайла, "---- Log end (date: " + Лев(ДатаДляОбработки, 2) + Сред(ДатаДляОбработки, 4, 2) + Прав(ДатаДляОбработки, 2)) > 0 Тогда
				ФлагНайденногоДня = Ложь;
				ВремяОтключенияСтанка = Сред(СтрокаФайла, 7, 8);
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла; 
	
	СтрокаЗапускаПрограммы = "";
	СтрокаВыключенияПрограммы = "";
	ИмяПрограммы = "";	
	Для Каждого стр из СтрокиПрограммы Цикл 
		СтрокиДляСохраненияФайла.Добавить(стр);	
		Если Найти(стр, "Start of program") > 0 Тогда
			СтрокаЗапускаПрограммы = стр;
			ИмяПрограммы = Прав(стр, СтрДлина(стр) - Найти(стр, "Start of program") - 16);
			Если Найти(ИмяПрограммы, "/") Тогда
				ИмяПрограммы = Прав(ИмяПрограммы, СтрДлина(ИмяПрограммы) - Найти(ИмяПрограммы, "/"));
			КонецЕсли;
		КонецЕсли;
		
		Если Найти(стр, "End of program") > 0 Тогда
			СтрокаВыключенияПрограммы = стр;
			
			Если СтрокаЗапускаПрограммы <> "" и СтрокаВыключенияПрограммы <> "" и ИмяПрограммы <> "" Тогда
				НоваяПрограмма = ТаблицаПрограмм.Добавить();
				НоваяПрограмма.Номер = ТаблицаПрограмм.Количество();
				НоваяПрограмма.Смена = 1;
				НоваяПрограмма.Количество = 1;
				
				НоваяПрограмма.ВремяНачалаРаботы = ПолучитьРазницуМеждуСтроками(СтрокаЗапускаПрограммы);	
				НоваяПрограмма.ВремяОкончанияРаботы = ПолучитьРазницуМеждуСтроками(СтрокаВыключенияПрограммы);		
				НоваяПрограмма.ВремяРеальное = НоваяПрограмма.ВремяОкончанияРаботы - НоваяПрограмма.ВремяНачалаРаботы;			
				НоваяПрограмма.ИмяПрограммы = ИмяПрограммы;	
				
				ВремяРеальное = ВремяРеальное + НоваяПрограмма.ВремяРеальное;	
			КонецЕсли;
			
			СтрокаЗапускаПрограммы = "";
			СтрокаВыключенияПрограммы = "";
			ИмяПрограммы = "";	
		КонецЕсли;		
	КонецЦикла;
	
	ВремяРаботы = ПолучитьРазницуМеждуСтроками(ВремяОтключенияСтанка, ВремяВключенияСтанка);
	
	// 600 = 10 минут
	Если ВремяРаботы - ВремяРеальное > 600 Тогда
		ВремяФактическое = ВремяРеальное + 600;
		ВремяПростоя = ВремяРаботы - ВремяРеальное - 600;
	Иначе
		ВремяФактическое = ВремяРаботы;
		ВремяПростоя = 0;		
	КонецЕсли;
	
	//для алгоритма позалюкса нужно свернуть и пересчитать СекундНаОднуПлату и ПлатВЧас + находим НП для свернутых данных
	ТаблицаПрограмм.Свернуть("Изделие, ПечатнаяПлата, ИмяПрограммы, ПлатМульт, Смена", "Номер, Количество, ВремяНачалаРаботы, ВремяОкончанияРаботы, ВремяРеальное, СекундНаОднуПлату, ПлатВЧас");
	Для Каждого стр из ТаблицаПрограмм Цикл
		стр.ПечатнаяПлата = ПолучитьНП_ИзХранилищаУП(лев(стр.ИмяПрограммы, СтрДлина(стр.ИмяПрограммы) - 4), Прав(стр.ИмяПрограммы, 3), Истина);
		стр.ПлатМульт = ПолучитьПлатМульт(стр.ПечатнаяПлата);				
		стр.СекундНаОднуПлату = Окр(стр.ВремяРеальное / (стр.Количество * стр.ПлатМульт), 1);
		стр.ПлатВЧас = Окр(3600 / стр.СекундНаОднуПлату, 1);	
	КонецЦикла;
КонецПроцедуры

//	************	МИВА
Процедура ОбойтиФайлМИВА(Знач Файл)
	ПервичнаяВыборка = Новый Массив();
	ПервичныйОбходФайлаМива(ПервичнаяВыборка, Файл.ПолноеИмя);
	
	ТекущаяДата = ДатаНачала;
	Пока ТекущаяДата <= ДатаОкончания Цикл
		Лог("-------------------------");
		Лог(ТекущаяДата);
		ТаблицаПрограмм.Очистить();
		СтрокиДляСохраненияФайла.Очистить();
		ВремяРаботы = 0; 
		ВремяФактическое = 0; 
		ВремяРеальное = 0; 
		ВремяПростоя = 0;
		
		ТаблицаСмен = Новый ТаблицаЗначений();
		ТаблицаСмен.Колонки.Добавить("Номер", Новый ОписаниеТипов("Число"));
		ТаблицаСмен.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата"));
		ТаблицаСмен.Колонки.Добавить("Конец", Новый ОписаниеТипов("Дата"));
		
		Для Каждого Стр Из Станок.РежимРаботы.Выгрузить() Цикл
			НоваяСмена = ТаблицаСмен.Добавить();
			НоваяСмена.Номер = Стр.Смена;
			НоваяСмена.Начало = ТекущаяДата + Час(Стр.ВремяС) * 3600 + Минута(Стр.ВремяС) * 60 + Секунда(Стр.ВремяС);
			НоваяСмена.Конец = НоваяСмена.Начало + Стр.ВремяРаботы * 3600;
		КонецЦикла;
		
		Если ТаблицаСмен.Количество() = 0 Тогда
			//Предупреждение("Необходимо заполнить рабочие смены для выбранного станка!");
			Возврат;
		КонецЕсли;
		
		ЗаполнитьПрограммыМива(ПервичнаяВыборка, ТекущаяДата, ТаблицаСмен);
		
		Если Отладка Тогда
			ТаблицаПрограмм.ВыбратьСтроку();
		КонецЕсли;	
		
		Если ТаблицаПрограмм.Количество() > 0 Тогда
			НоваяКонтрольнаяКарта = Документы.КонтрольнаяКартаОборудования.СоздатьДокумент();
			ЗаполнитьКонтрольнуюКарту(НоваяКонтрольнаяКарта, Станок, СохранитьНовыйФайл(СтрокиДляСохраненияФайла, Файл.Имя, Перечисления.ФункцииОбработкиЛогФайлов.ПрямоеЭкспонированиеМива), ТекущаяДата);
			НоваяКонтрольнаяКарта.Записать();
			
			Форма = НоваяКонтрольнаяКарта.ПолучитьФорму();
			Форма.Открыть();
		КонецЕсли;
		
		ТекущаяДата = ТекущаяДата + 24 * 60 * 60;			
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПервичныйОбходФайлаМива(Знач ПервичнаяВыборка, Знач Путь)
	Текст = Новый ЧтениеТекста(Путь, КодировкаТекста.UTF8);
	СтрокаФайла = "";
	ВтораяПоловинаДня = Ложь;
	
	// ***	просмотр файла для первичной выборки
	ПредыдущийДень = "";
	ПредыдущееВремя = "";
	Пока Истина Цикл
		СтрокаФайла = Текст.ПрочитатьСтроку();
		
		Если СтрокаФайла = Неопределено Тогда
			Прервать;
		Иначе
			СтрокаФайла = СокрЛП(СтрокаФайла);
		КонецЕсли;	
		
		Если Найти(СтрокаФайла, "Start at: ") > 0 Тогда
			ТекстПоиска = "Start at: ";
		ИначеЕсли Найти(СтрокаФайла, "Done at: ") > 0 Тогда
			ТекстПоиска = "Done at: ";		
		КонецЕсли;
		
		Если Найти(СтрокаФайла, ТекстПоиска) > 0 Тогда
			СтрокаДатыВремени = Прав(СтрокаФайла, 19);
			ТекущийДень = Сред(СтрокаДатыВремени, 7, 4) + Лев(СтрокаДатыВремени, 2) + Сред(СтрокаДатыВремени, 4, 2);
			
			ВремяСтроки = Прав(СтрокаДатыВремени, 8);
			ДатаСтроки = Лев(СтрокаДатыВремени, 10);
			
			Если ПредыдущееВремя <> "" Тогда
				Если ТекущийДень = ПредыдущийДень Тогда
					Если ПолучитьРазницуМеждуСтроками(ВремяСтроки, ПредыдущееВремя) < 0 Тогда
						ВтораяПоловинаДня = Истина;
					КонецЕсли;
				Иначе 						
					// ** программы запущенные до 1 утра нового дня считаются предыдущим днем
					Если Дата(ТекущийДень) - Дата(ПредыдущийДень) = 24 * 60 * 60 и Число( Лев(ПредыдущееВремя, 2) ) >= 23 и Число( Лев(ВремяСтроки, 2) ) >= 12 Тогда
						ДатаСтроки = Формат(Дата(ТекущийДень) - 1, "ДФ=MM.dd.yyyy; ДЛФ=");
						ТекущийДень = Сред(ДатаСтроки, 7, 4) + Лев(ДатаСтроки, 2) + Сред(ДатаСтроки, 4, 2);
					Иначе
						ВтораяПоловинаДня = Ложь;
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;	
			
			Если ВтораяПоловинаДня Тогда
				ВремяСтроки = Строка( Число(Лев(ВремяСтроки, 2)) + 12 ) + Прав(ВремяСтроки, 6);
			КонецЕсли;	
			
			ПредыдущийДень = ТекущийДень;
			ПредыдущееВремя = ВремяСтроки;
			
			ОбработаннаяСтрока = "" + ТекстПоиска + ДатаСтроки + " " + ВремяСтроки;
			ПервичнаяВыборка.Добавить(ОбработаннаяСтрока);	
		КонецЕсли;
		
		Если Найти(СтрокаФайла, "Side") > 0 Тогда
			ПервичнаяВыборка.Добавить(СтрокаФайла);
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура ЗаполнитьПрограммыМива(Знач ПервичнаяВыборка, Знач ТекущаяДата, Знач ТаблицаСмен)	
	ВремяВключенияСтанка = "";
	ВремяОтключенияСтанка = "";
	НайденныеПрограмммы = Новый Массив();
	ДатаПоиска = Формат(ТекущаяДата, "ДФ=MM.dd.yyyy; ДЛФ=");
	НужныйДень = Ложь;	
	
	Для Каждого стр из ПервичнаяВыборка Цикл
		Если Найти(стр, ДатаПоиска) > 0 Тогда	
			НужныйДень = Истина;
			Если Найти(стр, "Start") > 0 Тогда		
				Если ВремяВключенияСтанка = "" Тогда
					ВремяВключенияСтанка = Прав(стр, 8);
				КонецЕсли;
			ИначеЕсли Найти(стр, "Done") > 0 Тогда
				ВремяОтключенияСтанка = Прав(стр, 8);
			Иначе
				Продолжить;
			КонецЕсли; 
		ИначеЕсли Найти(стр, "Side") = 0 Тогда
			НужныйДень = Ложь;
		КонецЕсли;	
		
		Если НужныйДень Тогда
			НайденныеПрограмммы.Добавить(стр);	
			СтрокиДляСохраненияФайла.Добавить(стр);
		КонецЕсли;	
	КонецЦикла;
	
	Если НайденныеПрограмммы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НайденныеПрограмммы.Количество() > 0 Тогда	
		КомандаСтарт = "Start at: " + ДатаПоиска;
		КомандаСтоп = "Done at: " + ДатаПоиска;
		Для счетчик = 0 по НайденныеПрограмммы.Количество() - 3 Цикл
			стр1 = НайденныеПрограмммы[счетчик];
			стр2 = НайденныеПрограмммы[счетчик + 1];
			стр3 = НайденныеПрограмммы[счетчик + 2];
			Если Найти(стр1, КомандаСтарт) > 0 и Найти(стр2, "Side") > 0 и Найти(стр3, КомандаСтоп) > 0 Тогда
				ВремяСтарт = Прав(стр1, СтрДлина(стр1) - Найти(стр1, КомандаСтарт) - СтрДлина(КомандаСтарт));			
				ПрограммаСтрока = СокрЛП(стр2);
				
				ВремяСтоп = Прав(стр3, СтрДлина(стр3) - Найти(стр3, КомандаСтоп) - СтрДлина(КомандаСтоп));
				
				Лог("Старт = " + ВремяСтарт + " ; Стоп = " + ВремяСтоп + " ; Текст = " + ПрограммаСтрока);
				
				Пока Найти(ПрограммаСтрока, ", ") > 0 Цикл
					ПрограммаСтрока = Прав(ПрограммаСтрока, СтрДлина(ПрограммаСтрока) - Найти(ПрограммаСтрока, ", ") - 1);	
				КонецЦикла;
				ИмяПрограммы = Лев(ПрограммаСтрока, СтрДлина(ПрограммаСтрока) - 5);	// убираем .gbr,
				
				НоваяПрограмма = ТаблицаПрограмм.Добавить();
				НоваяПрограмма.Номер = Лев(стр2, Найти(стр2, ", ") - 1);
				НоваяПрограмма.ИмяПрограммы = ИмяПрограммы;
				НоваяПрограмма.Количество = 1;
				
				НоваяПрограмма.ВремяНачалаРаботы = ПолучитьРазницуМеждуСтроками(ВремяСтарт);
				НоваяПрограмма.ВремяОкончанияРаботы = ПолучитьРазницуМеждуСтроками(ВремяСтоп);
				НоваяПрограмма.ВремяРеальное = НоваяПрограмма.ВремяОкончанияРаботы - НоваяПрограмма.ВремяНачалаРаботы;
				
				ДатаСтарта = ТекущаяДата;
				Если Лев(ВремяСтарт, 2) = "24" Тогда 
					ДатаСтарта = ДатаСтарта + 24 * 60 * 60;
					ВремяСтарт = "00:" + Сред(ВремяСтарт, 4, 2) + ":" + Прав(ВремяСтарт, 2); 	
				КонецЕсли;			
				ДатаСтарта = Дата(ДатаСтарта) + Лев(ВремяСтарт, 2) * 60 * 60 + Число(Сред(ВремяСтарт, 4, 2)) * 60 + Прав(ВремяСтарт, 2);	
				
				НоваяПрограмма.Смена = ПолучитьСмену(ТаблицаСмен, ДатаСтарта);
			КонецЕсли;
		КонецЦикла;
		
		Если Отладка Тогда
			ТаблицаПрограмм.ВыбратьСтроку();
		КонецЕсли;
		
		ВремТаб = ТаблицаПрограмм.Скопировать();
		ТаблицаПрограмм.Очистить();
		Для Каждого стр из ВремТаб Цикл
			ИмяПрограммы = Лев(стр.ИмяПрограммы, Найти(стр.ИмяПрограммы, "_") - 1);
			
			НайдСтрока = ТаблицаПрограмм.Найти(ИмяПрограммы, "ИмяПрограммы");
			Если НайдСтрока = Неопределено Тогда
				НайдСтрока = ТаблицаПрограмм.Добавить();
				НайдСтрока.Номер = ТаблицаПрограмм.Количество();
				НайдСтрока.ИмяПрограммы = ИмяПрограммы;
				НайдСтрока.ПечатнаяПлата = ПолучитьНП_ИзХранилищаУП(НайдСтрока.ИмяПрограммы, , Истина);
				НайдСтрока.Смена = стр.Смена;
				
				НайдСтрока.ТаблицаСлоев = Новый ТаблицаЗначений;
				НайдСтрока.ТаблицаСлоев.Колонки.Добавить("ПрограммаСлоя", Новый ОписаниеТипов("Строка"));
				НайдСтрока.ТаблицаСлоев.Колонки.Добавить("ВремяНачалаРаботы", Новый ОписаниеТипов("Число"));
				НайдСтрока.ТаблицаСлоев.Колонки.Добавить("ВремяОкончанияРаботы", Новый ОписаниеТипов("Число"));
				НайдСтрока.ТаблицаСлоев.Колонки.Добавить("ВремяРеальное", Новый ОписаниеТипов("Число"));
			КонецЕсли;
			НайдСтрока.Количество = НайдСтрока.Количество + стр.Количество;		
			НайдСтрока.ВремяНачалаРаботы = НайдСтрока.ВремяНачалаРаботы + стр.ВремяНачалаРаботы;
			НайдСтрока.ВремяОкончанияРаботы = НайдСтрока.ВремяОкончанияРаботы + стр.ВремяОкончанияРаботы;
			НайдСтрока.ВремяРеальное = НайдСтрока.ВремяРеальное + стр.ВремяРеальное;
			
			НовыйСлой = НайдСтрока.ТаблицаСлоев.Добавить();
			НовыйСлой.ПрограммаСлоя = стр.ИмяПрограммы;
			НовыйСлой.ВремяНачалаРаботы = стр.ВремяНачалаРаботы;
			НовыйСлой.ВремяОкончанияРаботы = стр.ВремяОкончанияРаботы;
			НовыйСлой.ВремяРеальное = стр.ВремяРеальное;
			
			// *** для поиска так же может использоваться имя программы СЛОЯ
			Если НайдСтрока.ПечатнаяПлата = Справочники.НП.ПустаяСсылка() Тогда
				НайдСтрока.ПечатнаяПлата = ПолучитьНП_ИзХранилищаУП(стр.ИмяПрограммы, , Истина);
			КонецЕсли;
			
			НайдСтрока.ПлатМульт = ПолучитьПлатМульт(НайдСтрока.ПечатнаяПлата);
			
			ВремяРеальное = ВремяРеальное + стр.ВремяРеальное;
		КонецЦикла;
		
		ВремяФактическое = ПолучитьРазницуМеждуСтроками(ВремяОтключенияСтанка, ВремяВключенияСтанка);
		ВремяПростоя = 0;	
		Лог("Станок включили " + ВремяВключенияСтанка);
		Лог("Станок отключили " + ВремяОтключенияСтанка);
		Лог("Время Работы станка " + ВремяФактическое);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьСмену(Знач ТаблицаСмен, Знач ДатаПрограммы)
	Результат = 1;
	Для Каждого стр из ТаблицаСмен Цикл
		Если стр.Начало <= ДатаПрограммы И ДатаПрограммы <= стр.Конец Тогда
			Результат = стр.Номер;
			Прервать;
		ИначеЕсли ДатаПрограммы > стр.Конец Тогда
			Результат = стр.Номер;
		КонецЕсли;
	КонецЦикла;
	
	Лог("--- ПолучитьСмену --- ДатаПрограммы = " + ДатаПрограммы + " --- Результат = " + Результат + " ---");
	Возврат Результат;
КонецФункции

//	************	АОИ
Процедура ОбойтиФайлАОИ(Знач Файл)
	Текст = Новый ЧтениеТекста(Файл.ПолноеИмя, КодировкаТекста.UTF8);	
	СтрокаФайла = "";
	НулеваяВыборка = Новый Массив;
	
	//	просмотр файла для нулевой выборки значимых строк	
	Пока Истина Цикл
		СтрокаФайла = Текст.ПрочитатьСтроку();
		
		Если СтрокаФайла = Неопределено Тогда
			Прервать;
		Иначе
			СтрокаФайла = СокрЛП(СтрокаФайла);
		КонецЕсли;
		
		Если Найти(СтрокаФайла, "INFO") > 0 и ( Найти(СтрокаФайла, "Layer") > 0 или Найти(СтрокаФайла, "layer") > 0 или Найти(СтрокаФайла, "Phoenix rises") > 0 или Найти(СтрокаФайла, "End of run") > 0 ) Тогда
			НулеваяВыборка.Добавить(СтрокаФайла);
		КонецЕсли;
	КонецЦикла;
	
	ТекущаяДата = ДатаНачала;
	Пока ТекущаяДата <= ДатаОкончания Цикл
		ПервичнаяВыборка = Новый Массив;
		ВторичнаяВыборка = Новый Массив;
		ВремяВключенияСтанка = "";
		ВремяОтключенияСтанка = "";	
		ТаблицаПрограмм.Очистить();
		СтрокиДляСохраненияФайла.Очистить();
		ВремяРаботы = 0; 
		ВремяФактическое = 0; 
		ВремяРеальное = 0; 
		ВремяПростоя = 0;
		
		ДатаПоиска = Формат(ТекущаяДата, "ДФ=yyyy-MM-dd; ДЛФ=");
		//	просмотр нулевой выборки для первичной выборки в разрезе дня
		Для Каждого стр Из НулеваяВыборка Цикл 		
			Если Найти(стр, ДатаПоиска) > 0 Тогда	
				Если ВремяВключенияСтанка = "" Тогда
					ВремяВключенияСтанка = Сред(стр, 12, 8);
				КонецЕсли;	
				ВремяОтключенияСтанка = Сред(стр, 12, 8);
				
				ПервичнаяВыборка.Добавить(стр);
				СтрокиДляСохраненияФайла.Добавить(стр);
			КонецЕсли;
		КонецЦикла;
		
		Если ПервичнаяВыборка.Количество() = 0 Тогда
			ТекущаяДата = ТекущаяДата + 24 * 60 * 60;	
			Продолжить;
		КонецЕсли;
		
		//	проход первичной выборки для определения реального времени работы и печатных плат
		КомандаСтарт = "started for job";
		КомандаСтоп = "ended for job";	
		Для Каждого стр из ПервичнаяВыборка Цикл
			Если Найти(стр, КомандаСтарт) > 0 или Найти(стр, КомандаСтоп) > 0 Тогда
				ВторичнаяВыборка.Добавить(стр);
				Лог("> " + стр);	
			КонецЕсли;
		КонецЦикла;
		
		Для счетчик = 0 по ВторичнаяВыборка.Количество() - 2 Цикл
			стр1 = ВторичнаяВыборка[счетчик];
			стр2 = ВторичнаяВыборка[счетчик + 1];
			Если Найти(стр1, КомандаСтарт) > 0 и Найти(стр2, КомандаСтоп) > 0 Тогда
				ПрограммаСтарт = Прав(стр1, СтрДлина(стр1) - Найти(стр1, КомандаСтарт) - СтрДлина(КомандаСтарт));
				ПрограммаСтоп = Прав(стр2, СтрДлина(стр2) - Найти(стр2, КомандаСтоп) - СтрДлина(КомандаСтоп));
				Если ПрограммаСтарт = ПрограммаСтоп Тогда
					ИмяПрограммы = Лев(стр, Найти(ПрограммаСтарт, ", layer"));
					
					НоваяПрограмма = ТаблицаПрограмм.Добавить();
					НоваяПрограмма.Номер = ТаблицаПрограмм.Количество();
					НоваяПрограмма.ИмяПрограммы = ПрограммаСтарт;
					НоваяПрограмма.Количество = 1;
					
					ВремяСтарт = Сред(стр1, 12, 8);
					ВремяСтоп = Сред(стр2, 12, 8);
					НоваяПрограмма.ВремяНачалаРаботы = ПолучитьРазницуМеждуСтроками(ВремяСтарт);
					НоваяПрограмма.ВремяОкончанияРаботы = ПолучитьРазницуМеждуСтроками(ВремяСтоп);
					НоваяПрограмма.ВремяРеальное = ПолучитьРазницуМеждуСтроками(ВремяСтоп, ВремяСтарт);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Отладка Тогда
			ТаблицаПрограмм.ВыбратьСтроку();
		КонецЕсли;
		
		ВремТаб = ТаблицаПрограмм.Скопировать();
		ТаблицаПрограмм.Очистить();
		Для Каждого стр из ВремТаб Цикл
			ИмяПрограммы = Лев(стр.ИмяПрограммы, Найти(стр.ИмяПрограммы, ", layer") - 1);
			
			// *** для поиска так же может использоваться имя программы СЛОЯ
			ИмяПрограммыДополнительное = Прав(стр.ИмяПрограммы, СтрДлина(стр.ИмяПрограммы) - Найти(стр.ИмяПрограммы, "layer") - 5);
			Если Найти(ИмяПрограммыДополнительное, ".gbr") > 0 Тогда
				ИмяПрограммыДополнительное = Лев(ИмяПрограммыДополнительное, Найти(ИмяПрограммыДополнительное, ".gbr") - 1);
			КонецЕсли;
			
			НайдСтрока = ТаблицаПрограмм.Найти(ИмяПрограммы, "ИмяПрограммы");
			Если НайдСтрока = Неопределено Тогда
				НайдСтрока = ТаблицаПрограмм.Добавить();
				НайдСтрока.Номер = ТаблицаПрограмм.Количество();
				НайдСтрока.ИмяПрограммы = ИмяПрограммы;
				НайдСтрока.ПечатнаяПлата = ПолучитьНП_ИзХранилищаУП(НайдСтрока.ИмяПрограммы, , Истина);
				НайдСтрока.Смена = 1;
				
				НайдСтрока.ТаблицаСлоев = Новый ТаблицаЗначений;
				НайдСтрока.ТаблицаСлоев.Колонки.Добавить("ПрограммаСлоя", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
				НайдСтрока.ТаблицаСлоев.Колонки.Добавить("ВремяНачалаРаботы", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0)));
				НайдСтрока.ТаблицаСлоев.Колонки.Добавить("ВремяОкончанияРаботы", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0)));
				НайдСтрока.ТаблицаСлоев.Колонки.Добавить("ВремяРеальное", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0)));
			КонецЕсли;
			НайдСтрока.Количество = НайдСтрока.Количество + стр.Количество;		
			НайдСтрока.ВремяНачалаРаботы = НайдСтрока.ВремяНачалаРаботы + стр.ВремяНачалаРаботы;
			НайдСтрока.ВремяОкончанияРаботы = НайдСтрока.ВремяОкончанияРаботы + стр.ВремяОкончанияРаботы;
			НайдСтрока.ВремяРеальное = НайдСтрока.ВремяРеальное + стр.ВремяРеальное;
			
			НовыйСлой = НайдСтрока.ТаблицаСлоев.Добавить();
			НовыйСлой.ПрограммаСлоя = стр.ИмяПрограммы;
			НовыйСлой.ВремяНачалаРаботы = стр.ВремяНачалаРаботы;
			НовыйСлой.ВремяОкончанияРаботы = стр.ВремяОкончанияРаботы;
			НовыйСлой.ВремяРеальное = стр.ВремяРеальное;
			
			Если НайдСтрока.ПечатнаяПлата = Справочники.НП.ПустаяСсылка() Тогда
				НайдСтрока.ПечатнаяПлата = ПолучитьНП_ИзХранилищаУП(ИмяПрограммыДополнительное, , Истина);
				Если НайдСтрока.ПечатнаяПлата <> Справочники.НП.ПустаяСсылка() Тогда
					НайдСтрока.ИмяПрограммы = ИмяПрограммыДополнительное;
					Лог("По Программе = " + НайдСтрока.ИмяПрограммы + " не найдено ПП ; при поиске по ИмяПрограммыДополнительное = " + ИмяПрограммыДополнительное + " найдена " + НайдСтрока.ПечатнаяПлата);
				КонецЕсли;
			КонецЕсли;
			
			НайдСтрока.ПлатМульт = ПолучитьПлатМульт(НайдСтрока.ПечатнаяПлата);
			
			ВремяРеальное = ВремяРеальное + стр.ВремяРеальное;
		КонецЦикла;
		
		Для Каждого стр из ТаблицаПрограмм Цикл
			Стр.СекундНаОднуПлату = Окр(Стр.ВремяРеальное / (Стр.Количество * Стр.ПлатМульт), 1);
		КонецЦикла;
		
		ВремяФактическое = ПолучитьРазницуМеждуСтроками(ВремяОтключенияСтанка, ВремяВключенияСтанка);
		ВремяПростоя = 0;	
		Лог("Станок включили = " + ВремяВключенияСтанка);
		Лог("Станок отключили = " + ВремяОтключенияСтанка);
		Лог("Время Работы станка = " + ВремяФактическое);
		
		НоваяКонтрольнаяКарта = Документы.КонтрольнаяКартаОборудования.СоздатьДокумент();
		ЗаполнитьКонтрольнуюКарту(НоваяКонтрольнаяКарта, Станок, СохранитьНовыйФайл(СтрокиДляСохраненияФайла, Файл.Имя, Перечисления.ФункцииОбработкиЛогФайлов.ОптическийКонтрольАОИ), ТекущаяДата);
		НоваяКонтрольнаяКарта.Записать();
		
		Форма = НоваяКонтрольнаяКарта.ПолучитьФорму();
		Форма.Открыть();
		
		ТекущаяДата = ТекущаяДата + 24 * 60 * 60;
	КонецЦикла;
КонецПроцедуры

Отладка = Ложь;
ОбработкаLOG_Файлов = Справочники.ОбработкаLOG_Файлов.НайтиПоКоду(15);

ДатаНачала = Дата('20180111');
ДатаОкончания = Дата('20180112');

Смена = 1;

СтрокиДляСохраненияФайла = Новый Массив();
ТаблицаПрограмм = Новый ТаблицаЗначений();    

ТаблицаПрограмм.Колонки.Добавить("Номер", Новый ОписаниеТипов("Число"));
ТаблицаПрограмм.Колонки.Добавить("Изделие");
ТаблицаПрограмм.Колонки.Добавить("ПечатнаяПлата", Новый ОписаниеТипов("СправочникСсылка.НП"));
ТаблицаПрограмм.Колонки.Добавить("ИмяПрограммы", Новый ОписаниеТипов("Строка"));
ТаблицаПрограмм.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
ТаблицаПрограмм.Колонки.Добавить("ПлатМульт", Новый ОписаниеТипов("Число"));

ТаблицаПрограмм.Колонки.Добавить("ВремяНачалаРаботы", Новый ОписаниеТипов("Число"));
ТаблицаПрограмм.Колонки.Добавить("ВремяОкончанияРаботы", Новый ОписаниеТипов("Число"));
ТаблицаПрограмм.Колонки.Добавить("ВремяРеальное", Новый ОписаниеТипов("Число"));

ТаблицаПрограмм.Колонки.Добавить("СекундНаОднуПлату", Новый ОписаниеТипов("Число"));
ТаблицаПрограмм.Колонки.Добавить("ПлатВЧас", Новый ОписаниеТипов("Число"));

//	*** Колонки определяемые для МИВА и АОИ ; Смена для Сверлильных жестко задается = 1
ТаблицаПрограмм.Колонки.Добавить("ТаблицаСлоев");
ТаблицаПрограмм.Колонки.Добавить("Смена");
