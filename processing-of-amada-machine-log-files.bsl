
Перем Хар_A60_Угол_Поворота_Штамп;
Перем Хар_B60_Ширина_Штамп, Хар_B62_Ширина_Форм;
Перем Хар_D60_Диам_Штамп;
Перем Хар_L60_Длина_Штам, Хар_L61_Зазор_Штам, Хар_L66_Длина_Форм;
Перем Хар_Типоразмер_Проб, Хар_Типоразмер_Форм; 
Перем Хар_Посадка_ТипШтам, Хар_SPC_тип_Код_размера_CAM;

//	***	
Функция Лог(Знач Стр)
	Если Отладка Тогда
		Сообщить(Формат(ТекущаяДата(), "ДЛФ=T") + "|" + Строка(ТипЗнч(Стр)) + "|" + Строка(Стр));
	КонецЕсли;
КонецФункции

//	*** Лексический Анализатор

Функция СледующийЛитерал(Литерал, ТекстЗапроса, ТекПоз)
	Если ТекПоз <= СтрДлина(ТекстЗапроса) Тогда
		// Пропустить пробелы
		НезначащиеСимволы = " " + Символы.ПС + Символы.Таб + ",";
		Пока Найти(НезначащиеСимволы, Сред(ТекстЗапроса, ТекПоз, 1)) > 0 Цикл
			ТекПоз = ТекПоз + 1;
		КонецЦикла;
		
		// Извлечь литерал
		ТекСимвол = Сред(ТекстЗапроса, ТекПоз, 1);
        Если ЭтоЦифра(ТекСимвол) или ТекСимвол = "-" Тогда
			Литерал = ИзвлечьЧисло(ТекстЗапроса, ТекПоз);
		ИначеЕсли ЭтоСимвол(ТекСимвол) Тогда
			Литерал = ИзвлечьПараметр(ТекстЗапроса, ТекПоз);
		Иначе
			ТекПоз = ТекПоз + 1;
			Литерал = ТекСимвол;
		КонецЕсли;
		Возврат Истина;
	Иначе
		Литерал = Неопределено;
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ИзвлечьПараметр(ТекстЗапроса, ТекПоз)
	ТекСимвол = Сред(ТекстЗапроса, ТекПоз, 1);
	Результат = "";
	// Целая часть
	Пока (ЭтоСимвол(ТекСимвол) ИЛИ ЭтоЦифра(ТекСимвол)) И ТекПоз <= СтрДлина(ТекстЗапроса) Цикл
		ТекПоз = ТекПоз + 1;
		Результат = Результат + ТекСимвол;
		ТекСимвол = Сред(ТекстЗапроса, ТекПоз, 1);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ИзвлечьЧисло(ТекстЗапроса, ТекПоз = 1)
	ТекСимвол = Сред(ТекстЗапроса, ТекПоз, 1);
	Результат = "";
	Знак = "";
	
	//Пробел
	Если ТекСимвол = " " Тогда  
		ТекПоз = ТекПоз + 1;
        ТекСимвол = Сред(ТекстЗапроса, ТекПоз, 1);
	КонецЕсли;
	
	//отрицательное значение
	Если ТекСимвол = "-" Тогда  
		Знак = "-";
		ТекПоз = ТекПоз + 1;
        ТекСимвол = Сред(ТекстЗапроса, ТекПоз, 1);
	КонецЕсли;
		
	// Целая часть
	Пока ЭтоЦифра(ТекСимвол) И ТекПоз <= СтрДлина(ТекстЗапроса) Цикл
		ТекПоз = ТекПоз + 1;
		Результат = Результат + ТекСимвол;
		ТекСимвол = Сред(ТекстЗапроса, ТекПоз, 1);
	КонецЦикла;
	
	// Дробная часть
	Если ТекСимвол = "." Тогда
		Результат = Результат + ".";
		ТекПоз = ТекПоз + 1;
		ТекСимвол = Сред(ТекстЗапроса, ТекПоз, 1);
		Пока ЭтоЦифра(ТекСимвол) И ТекПоз <= СтрДлина(ТекстЗапроса) Цикл
			ТекПоз = ТекПоз + 1;
			Результат = Результат + ТекСимвол;
			ТекСимвол = Сред(ТекстЗапроса, ТекПоз, 1);
		КонецЦикла;
	КонецЕсли;
	
	Результат = Знак + Результат;
	
	Возврат Число(Результат);
КонецФункции

Функция ЭтоЦифра(ТекСимвол)
	Возврат ТекСимвол >= "0" И ТекСимвол <= "9";
КонецФункции

Функция ЭтоСимвол(ТекСимвол)
	Возврат (ТекСимвол >= "A" И ТекСимвол <= "Z") ИЛИ (ТекСимвол >= "А" И ТекСимвол <= "Я") ИЛИ
	(ТекСимвол >= "a" И ТекСимвол <= "z") ИЛИ (ТекСимвол >= "а" И ТекСимвол <= "я");
КонецФункции

Функция СледующаяПорция(Команда,Значение, ТекстЗапроса, ТекПоз)
	Команда = "";
	Значение = 0;
	Если ТекПоз <= СтрДлина(ТекстЗапроса) Тогда
		// Выбор символа команды
		СимволыКоманды = "T" + "M" + "G" + "P" + "F" + "H"	+ "X" + "Y" + "Z" + "S" + "I" + "J" + "N" + "A" + "D"
		+ "K" + "Q" + "P" + "R";
		Если Найти(СимволыКоманды, Сред(ТекстЗапроса, ТекПоз, 1)) > 0 Тогда
			    Команда = Сред(ТекстЗапроса, ТекПоз, 1);
		        ТекПоз = ТекПоз + 1;
				Значение = ИзвлечьЧисло(ТекстЗапроса, ТекПоз);
				//Лог("1 Ком - (" + Команда + ")   значение=" + Значение + "  позиция-" + ТекПоз); 
		ИначеЕсли  Сред(ТекстЗапроса, ТекПоз, 1) = "(" ИЛИ Сред(ТекстЗапроса, ТекПоз, 1) = ")" Тогда
				Возврат Ложь;
	    КонецЕсли;
		
		Если Команда = "" тогда 
			ТекПоз = ТекПоз + 1;
		КонецЕсли;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

//	***

//	***	Вспомогательные Функции

Процедура РаспечататьСоответствия(Знач Соот)
	Для Каждого Эл Из Соот Цикл
		Лог(Строка(Эл.Ключ) + " : " + Строка(Эл.Значение));
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьЗазор(Знач ТолщинаЛистовогоМатериала, Знач Материал)	
	ЗазорМеждуПробойникомИМатрицей = Новый ТаблицаЗначений();
	ЗазорМеждуПробойникомИМатрицей.Колонки.Добавить("ТолщинаЛистовогоМатериала");
	ЗазорМеждуПробойникомИМатрицей.Колонки.Добавить("ЗазорНаИнструмент");
	
	НовСтр = ЗазорМеждуПробойникомИМатрицей.Добавить();
	НовСтр.ТолщинаЛистовогоМатериала = 0.8;
	СтрЗазор = Новый Соответствие();
	СтрЗазор.Вставить("FERRO", Перечисления.ЗазорыШтамповочногоИнструмента.зн_0_2);
	СтрЗазор.Вставить("ALUMINIUM", Перечисления.ЗазорыШтамповочногоИнструмента.зн_0_2);
	СтрЗазор.Вставить("ALLUMINIO", Перечисления.ЗазорыШтамповочногоИнструмента.зн_0_2);
	СтрЗазор.Вставить("INOX", Перечисления.ЗазорыШтамповочногоИнструмента.зн_0_2);
	НовСтр.ЗазорНаИнструмент = СтрЗазор;
	
	НовСтр = ЗазорМеждуПробойникомИМатрицей.Добавить();
	НовСтр.ТолщинаЛистовогоМатериала = 1.0;
	СтрЗазор = Новый Соответствие();
	СтрЗазор.Вставить("FERRO", Перечисления.ЗазорыШтамповочногоИнструмента.зн_0_2);
	СтрЗазор.Вставить("ALUMINIUM", Перечисления.ЗазорыШтамповочногоИнструмента.зн_0_2);
	СтрЗазор.Вставить("ALLUMINIO", Перечисления.ЗазорыШтамповочногоИнструмента.зн_0_2);
	СтрЗазор.Вставить("INOX", Перечисления.ЗазорыШтамповочногоИнструмента.зн_0_3);
	НовСтр.ЗазорНаИнструмент = СтрЗазор;
	
	НовСтр = ЗазорМеждуПробойникомИМатрицей.Добавить();
	НовСтр.ТолщинаЛистовогоМатериала = 1.5;
	СтрЗазор = Новый Соответствие();
	СтрЗазор.Вставить("FERRO", Перечисления.ЗазорыШтамповочногоИнструмента.зн_0_3);
	СтрЗазор.Вставить("ALUMINIUM", Перечисления.ЗазорыШтамповочногоИнструмента.зн_0_3);
	СтрЗазор.Вставить("ALLUMINIO", Перечисления.ЗазорыШтамповочногоИнструмента.зн_0_3);
	СтрЗазор.Вставить("INOX", Перечисления.ЗазорыШтамповочногоИнструмента.зн_0_4);
	НовСтр.ЗазорНаИнструмент = СтрЗазор;
	
	НовСтр = ЗазорМеждуПробойникомИМатрицей.Добавить();
	НовСтр.ТолщинаЛистовогоМатериала = 2.0;
	СтрЗазор = Новый Соответствие();
	СтрЗазор.Вставить("FERRO", Перечисления.ЗазорыШтамповочногоИнструмента.зн_0_4);
	СтрЗазор.Вставить("ALUMINIUM", Перечисления.ЗазорыШтамповочногоИнструмента.зн_0_3);
	СтрЗазор.Вставить("ALLUMINIO", Перечисления.ЗазорыШтамповочногоИнструмента.зн_0_3);
	СтрЗазор.Вставить("INOX", Перечисления.ЗазорыШтамповочногоИнструмента.зн_0_6);
	НовСтр.ЗазорНаИнструмент = СтрЗазор;
	
	НовСтр = ЗазорМеждуПробойникомИМатрицей.Добавить();
	НовСтр.ТолщинаЛистовогоМатериала = 2.5;
	СтрЗазор = Новый Соответствие();
	СтрЗазор.Вставить("FERRO", Перечисления.ЗазорыШтамповочногоИнструмента.зн_0_6);
	СтрЗазор.Вставить("ALUMINIUM", Перечисления.ЗазорыШтамповочногоИнструмента.зн_0_4);
	СтрЗазор.Вставить("ALLUMINIO", Перечисления.ЗазорыШтамповочногоИнструмента.зн_0_4);
	СтрЗазор.Вставить("INOX", Перечисления.ЗазорыШтамповочногоИнструмента.зн_0_6);
	НовСтр.ЗазорНаИнструмент = СтрЗазор;
	
	НовСтр = ЗазорМеждуПробойникомИМатрицей.Добавить();
	НовСтр.ТолщинаЛистовогоМатериала = 3.0;
	СтрЗазор = Новый Соответствие();
	СтрЗазор.Вставить("FERRO", Перечисления.ЗазорыШтамповочногоИнструмента.зн_0_6);
	СтрЗазор.Вставить("ALUMINIUM", Перечисления.ЗазорыШтамповочногоИнструмента.зн_0_6);
	СтрЗазор.Вставить("ALLUMINIO", Перечисления.ЗазорыШтамповочногоИнструмента.зн_0_6);
	НовСтр.ЗазорНаИнструмент = СтрЗазор;
	
	НовСтр = ЗазорМеждуПробойникомИМатрицей.Добавить();
	НовСтр.ТолщинаЛистовогоМатериала = 4.0;
	СтрЗазор = Новый Соответствие();
	СтрЗазор.Вставить("ALUMINIUM", Перечисления.ЗазорыШтамповочногоИнструмента.зн_0_6);
	СтрЗазор.Вставить("ALLUMINIO", Перечисления.ЗазорыШтамповочногоИнструмента.зн_0_6);
	НовСтр.ЗазорНаИнструмент = СтрЗазор;
	
	Попытка 
		Зазор = ЗазорМеждуПробойникомИМатрицей.Найти(ТолщинаЛистовогоМатериала, "ТолщинаЛистовогоМатериала").ЗазорНаИнструмент.Получить(Материал);
	Исключение
		Зазор = 0;
	КонецПопытки;
	
	Возврат Зазор;
КонецФункции

Функция ПолучитьТипШтамповочнойСтанции (Знач Символ)
	ТипШтамповочнойСтанции = Символ;
	
	Если Символ = "A" Тогда
		ТипШтамповочнойСтанции = Перечисления.ШтамповочныеСтанции.A;
	ИначеЕсли Символ = "B" Тогда
		ТипШтамповочнойСтанции = Перечисления.ШтамповочныеСтанции.B;
	ИначеЕсли Символ = "C" Тогда
		ТипШтамповочнойСтанции = Перечисления.ШтамповочныеСтанции.C;
	ИначеЕсли Символ = "D" Тогда
		ТипШтамповочнойСтанции = Перечисления.ШтамповочныеСтанции.D;
	КонецЕсли;
	
	Возврат ТипШтамповочнойСтанции;	
КонецФункции

Функция ПолучитьВидИнстумента(Знач Символ)
	ВидИнструмента = Символ;
	
	Если Символ = 0 Тогда
		ВидИнструмента = Справочники.ВидыИнструмента.НайтиПоКоду(233);
	ИначеЕсли Символ = "Q" Тогда
		ВидИнструмента = Справочники.ВидыИнструмента.НайтиПоКоду(234);
	ИначеЕсли Символ = "ASL" Тогда
		ВидИнструмента = Справочники.ВидыИнструмента.НайтиПоКоду(235);	
	ИначеЕсли Символ = "RET" Тогда
		ВидИнструмента = Справочники.ВидыИнструмента.НайтиПоКоду(236);	
	КонецЕсли;
	
	Возврат ВидИнструмента;
КонецФункции

Функция ПолучитьВидИнстументаМатрица(Знач Символ)
	ВидИнструмента = Символ;
	
	Если Символ = 0 Тогда
		ВидИнструмента = Справочники.ВидыИнструмента.НайтиПоКоду(468);
	ИначеЕсли Символ = "Q" Тогда
		ВидИнструмента = Справочники.ВидыИнструмента.НайтиПоКоду(470);
	ИначеЕсли Символ = "ASL" Тогда
		ВидИнструмента = Справочники.ВидыИнструмента.НайтиПоКоду(471);	
	ИначеЕсли Символ = "RET" Тогда
		ВидИнструмента = Справочники.ВидыИнструмента.НайтиПоКоду(472);	
	КонецЕсли;
	
	Возврат ВидИнструмента;
КонецФункции

Функция ПолучитьИнструментыПоВиду(Знач ВидИнструмента = "", Знач ИспользоватьВидИнструмента = Ложь)
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Инструменты.Ссылка КАК Инструмент,
	|	Инструменты.ВидИнструмента КАК ВидИнструмента
	|ИЗ
	|	Справочник.Инструменты КАК Инструменты
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ИспользоватьВидИнструмента
	|				ТОГДА Инструменты.ВидИнструмента = &ВидИнструмента
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И НЕ Инструменты.ЭтоГруппа
	|	И Инструменты.РазрешениеНаПрименение = ЗНАЧЕНИЕ(Перечисление.РазрешенияНаПрименение.ПрименениеРазрешеноТО)";
	Запрос.УстановитьПараметр("ВидИнструмента", ВидИнструмента);
	Запрос.УстановитьПараметр("ИспользоватьВидИнструмента", ИспользоватьВидИнструмента);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Инструмент");
КонецФункции

//	***

//	***	Главная функция Привязки инструментов Амады

Процедура ПривязатьИнструментыАмады(Знач НП, Знач Файл, Знач Записать = Ложь, ДокОб = Неопределено) Экспорт
	//ОчиститьСообщения();
	ПутьФайла = Файл.ПутьФайла;	
	Если ПустаяСтрока(ПутьФайла) Тогда
		Возврат;
	КонецЕсли;
	
	//	*** Заполнение Инструментов	
	ТабИнструменты.Очистить();
	ТабДопИнструменты.Очистить();
	МенялиВидИнструмента = Ложь;
	
	ИнструментыИзШапки = ПолучитьИнструментыИзШапки(ПутьФайла);
	
	Для а = 0 По ИнструментыИзШапки.Количество() - 1 Цикл
		//	*** Для SPC Первичная выборка это все имеющиеся инструменты. первый раз пытаемся искать по матрицам
		Если ИнструментыИзШапки[а].ПоискПоМатрицам Тогда
			ВыборкаИнструментов = ПолучитьИнструментыПоВиду(ИнструментыИзШапки[а].ВидИнструментаМатрица, Истина);
		Иначе
			ВыборкаИнструментов = ПолучитьИнструментыПоВиду(ИнструментыИзШапки[а].ВидИнструмента, ИнструментыИзШапки[а].ВидИнструмента <> "SPC");
		КонецЕсли;
		ВремВыборка = Неопределено;
		
		Лог(" ");
		Лог("*** поиск для номера " + ИнструментыИзШапки[а].Инструмент);
		Для Каждого Эл Из ИнструментыИзШапки[а].Структура Цикл
			//	*** Если Кончилась выборка инструментов нет смысла искать
			Если ВыборкаИнструментов.Количество() = 0 Тогда 
				Прервать; 
			КонецЕсли;
			
			//	*** Угол поворота не учитываем
			Если Эл.Ключ = Хар_A60_Угол_Поворота_Штамп Тогда 
				Продолжить;
			КонецЕсли;
			
			//	*** для 245 рифт параметр зазор не используется
			Если ИнструментыИзШапки[а].ВидИнструмента = Справочники.ВидыИнструмента.НайтиПоКоду(245) И Эл.Ключ = Хар_L61_Зазор_Штам Тогда
				Продолжить;
			КонецЕсли;
		
			//	***	поиск по зазору используется только для матриц
			Если Не ИнструментыИзШапки[а].ПоискПоМатрицам И Эл.Ключ = Хар_L61_Зазор_Штам Тогда
				Продолжить;
			КонецЕсли;
			
			//	*** Если при поиске инструмента по типу штамп станции B не находится инструмента, то для станции B нужно использовать инструмент станции A и дополнительный инструмент код 000010200
			//	*** Для всех остальных ищем по умолчанию
			Если Эл.Ключ = Хар_Посадка_ТипШтам И Эл.Значение = Перечисления.ШтамповочныеСтанции.B Тогда
				ВремВыборка = ПоискатьИнструмент(Эл.Ключ, Эл.Значение, ВыборкаИнструментов);
				Если ВремВыборка.Количество() = 0 Тогда    		
					Лог(" ");
					Лог("*** Изменен тип штамповочной станции на А");
					ВыборкаИнструментов = ПоискатьИнструмент(Эл.Ключ, Перечисления.ШтамповочныеСтанции.A, ВыборкаИнструментов);
				Иначе
					ВыборкаИнструментов = ВремВыборка;
					ВремВыборка = Неопределено;					
				КонецЕсли;
			Иначе
				ВыборкаИнструментов = ПоискатьИнструмент(Эл.Ключ, Эл.Значение, ВыборкаИнструментов);	
			КонецЕсли;
		КонецЦикла;
		
		//	***	Если инструмент не нашли в матрицах, тогда ищем по обычному ВидИнструмента
		Если ИнструментыИзШапки[а].ПоискПоМатрицам И ВыборкаИнструментов.Количество() <> 1 Тогда
			ИнструментыИзШапки[а].ПоискПоМатрицам = Ложь;
			а = а - 1;
			Продолжить;
		КонецЕсли;
		
		//	*** Если при поиске инструмента по типу ASL не находится инструмент с видом 235 Обраунт, то для поиска используется 245 рифт и параметр зазор не используется
		Если ИнструментыИзШапки[а].ВидИнструмента = Справочники.ВидыИнструмента.НайтиПоКоду(235) И ВыборкаИнструментов.Количество() = 0 Тогда
			//	*** Длину штамповочного меняем на Длину Формовочного
			ДлШт = ИнструментыИзШапки[а].Структура.Получить(Хар_L60_Длина_Штам);
			ИнструментыИзШапки[а].Структура.Вставить(Хар_L66_Длина_Форм, ДлШт);
			ИнструментыИзШапки[а].Структура.Удалить(Хар_L60_Длина_Штам);
			
			//	*** Ширину штамповочного меняем на Ширину Формовочного
			ШрШт = ИнструментыИзШапки[а].Структура.Получить(Хар_B60_Ширина_Штамп);
			ИнструментыИзШапки[а].Структура.Вставить(Хар_B62_Ширина_Форм, ШрШт);
			ИнструментыИзШапки[а].Структура.Удалить(Хар_B60_Ширина_Штамп);
		
			ИнструментыИзШапки[а].ВидИнструмента = Справочники.ВидыИнструмента.НайтиПоКоду(245);
			МенялиВидИнструмента = Истина;
			
			//	***	Поиск инструмента повторяется с новыми параметрами
			а = а - 1;
            Продолжить;
		КонецЕсли;
		
		НовСтрока = ТабИнструменты.Добавить();
		НовСтрока.Номер =  "T" + ИнструментыИзШапки[а].Инструмент;
		НовСтрока.Записать = Ложь;
		НовСтрока.МенялиТипШтампСтанции = ВремВыборка <> Неопределено;
		НовСтрока.МенялиВидИнструмента = МенялиВидИнструмента;

		Если ВыборкаИнструментов.Количество() = 1 Тогда
			НовСтрока.Инструмент = ВыборкаИнструментов.Получить(0);
			НовСтрока.ПоискПоМатрицам = ИнструментыИзШапки[а].ПоискПоМатрицам;
		ИначеЕсли ВыборкаИнструментов.Количество() = 0 Тогда
			Лог("Для инструмента " + НовСтрока.Номер + " в ограничительном списке не введены параметры, которые используются в УП");
		ИначеЕсли ВыборкаИнструментов.Количество() > 1 Тогда
			Лог("Для инструмента " + НовСтрока.Номер + " с данными параметрами существует несколько инструментов в ограничительном списке");	
		КонецЕсли;
		
		МенялиВидИнструмента = Ложь;
	КонецЦикла;
	
	//	*** Прогоняем программу УП для определения используемых инструментов (некоторые могут быть объявлены в шапке, но не использоваться
	Док = Новый ТекстовыйДокумент();
	Док.Прочитать(ПутьФайла);
	
	Счетчик = 0;
	Для Каждого СтрИнструмент из ТабИнструменты Цикл
		Счетчик = Счетчик + 1;
		
		Для Икс = 1 По Док.КоличествоСтрок() Цикл
			Стр = Док.ПолучитьСтроку(Икс);
			Если ПустаяСтрока(Стр) ИЛИ Лев(Стр, 1) = "(" Тогда
				Продолжить;
			КонецЕсли;
			
			Литерал = "";
			ТекПоз = 1;
			Если СледующийЛитерал(Литерал, Стр, ТекПоз) Тогда
				Пока Литерал <> Неопределено Цикл 
					СледующийЛитерал(Литерал, Стр, ТекПоз);
					УправСлово = ВРег(Литерал);
					Если УправСлово = Строка(СтрИнструмент.Номер) Тогда
						СтрИнструмент.Записать = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;
		КонецЦикла;	
		//Состояние("Инструмент #" + Счетчик + " из " + ТабИнструменты.Количество());
		СтрИнструмент.ТипоразмерМатриц = Справочники.Инструменты.ПолучитьЗначениеПоИнструменту(СтрИнструмент.Инструмент, Хар_Типоразмер_Проб);
		СтрИнструмент.ТипоразмерНаправляющихФормовочных = Справочники.Инструменты.ПолучитьЗначениеПоИнструменту(СтрИнструмент.Инструмент, Хар_Типоразмер_Форм);
		СтрИнструмент.ТипШтамповочнойСтанции = Справочники.Инструменты.ПолучитьЗначениеПоИнструменту(СтрИнструмент.Инструмент, Хар_Посадка_ТипШтам);
		ЗаполнитьДопИнструменты(СтрИнструмент);
	КонецЦикла;
	
	ТабКоличествоУдаров = ЗаполнитьКоличествоУдаров(ПутьФайла);
	
	//	*** Создаем документ привязки
	Если ДокОб = Неопределено Тогда
		ДокОб = Документы.ПривязкаИнструментов.СоздатьДокумент();
		ДокОб.НП = НП;
		//ДокОб.Путь = ПутьФайла;
		ДокОб.Файл = Файл;
		ДокОб.ГрупппаИнструмента = Перечисления.ГруппыПривязкиИнструмента.ЛистОбработка;
		ДокОб.Участок = Справочники.Места.НайтиПоКоду("6115");	
		ДокОб.ВидРабот = Справочники.ВидыРабот.НайтиПоКоду("122");
	Иначе
		ДокОб.Введено.Очистить();	
		ДокОб.НомераИнструментов.Очистить();
	КонецЕсли;
	
	ЗаполнитьИнструментыИзТЗ(ДокОб, ТабИнструменты, ТабКоличествоУдаров);
	ЗаполнитьИнструментыИзТЗ(ДокОб, ТабДопИнструменты, ТабКоличествоУдаров);
	
	СтрОборудование = ДокОб.Введено.Добавить(); 
	СтрОборудование.Инструмент = Справочники.Инструменты.НайтиПоКоду("000007470");
	
	ДокОб.Дата = СерверныеФункции.ТекущаяДатаСервера();
	ДокОб.Автор = глПользователь;
	ДокОб.Введено.Сортировать("Инструмент Возр");
	Если Записать Тогда
		ДокОб.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		ДокОб.ПолучитьФорму().Открыть();	
	КонецЕсли;
КонецПроцедуры

//	***

//	*** Функции обработки Файлов

Процедура ПоделатьНажатие(Элемент)
 	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХранилищеУПДокументы.Тип как Тип,
	|	ХранилищеУПДокументы.Файл как Файл,
	|	ХранилищеУПДокументы.Файл.Расширение как Расширение,
	|	ХранилищеУПДокументы.Файл.ПутьФайла как ПутьФайла
	|ИЗ
	|	Справочник.ХранилищеУП.Документы КАК ХранилищеУПДокументы
	|ГДЕ
	|	ХранилищеУПДокументы.Ссылка.Дсе = &Дсе
	|	И ХранилищеУПДокументы.Файл.Расширение = ""NC""";
	Запрос.УстановитьПараметр("ДСЕ", ДСЕ);
	Рез = Запрос.Выполнить().Выгрузить();
	
	Если Рез.Количество() > 1 Тогда
		ВыбСтрока = Рез.ВыбратьСтроку();
	ИначеЕсли Рез.Количество() = 1 Тогда
		ВыбСтрока = Рез[0];
	ИначеЕсли Рез.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ПривязатьИнструментыАмады(ДСЕ, ВыбСтрока.Файл);
КонецПроцедуры

Процедура ЗаполнитьИнструментыИзТЗ(Объект, Знач тзИнструм, Знач тзУдаров)
	Для Каждого Стр из тзИнструм Цикл
		Если Стр.Инструмент <> Справочники.Инструменты.ПустаяСсылка() Тогда
			НайдСтрока = Объект.Введено.Найти(Стр.Инструмент, "Инструмент");
			Если НайдСтрока = Неопределено Тогда
				НайдСтрока = Объект.Введено.Добавить(); 
				НайдСтрока.КлючСтроки = Объект.НайтиМаксимальныйКлючСтроки(Объект.Введено) + 1;
				НайдСтрока.Инструмент = Стр.Инструмент;
				НайдСтрока.ОдновременноЗадействовано = 1;
				
				НоваяСтрокаНомераИнстр = Объект.НомераИнструментов.Добавить(); 
				НоваяСтрокаНомераИнстр.КлючСтроки = НайдСтрока.КлючСтроки;
				НоваяСтрокаНомераИнстр.Номер = Стр.Номер;
			Иначе
				НайдСтрока.ОдновременноЗадействовано = НайдСтрока.ОдновременноЗадействовано + 1;
				НоваяСтрокаНомераИнстр = Объект.НомераИнструментов.Добавить(); 
				НоваяСтрокаНомераИнстр.КлючСтроки = НайдСтрока.КлючСтроки;
				НоваяСтрокаНомераИнстр.Номер = Стр.Номер;
			КонецЕсли;
			
			НайдСтрокаУдаров = тзУдаров.Найти(Стр.Номер, "НомерИнструмента");
			Если НайдСтрокаУдаров <> Неопределено Тогда
				НайдСтрока.КоличествоУдаров = НайдСтрока.КоличествоУдаров + НайдСтрокаУдаров.КоличествоУдаров;
				НайдСтрока.РабочийПуть = НайдСтрока.КоличествоУдаров;		
				НоваяСтрокаНомераИнстр.ДлинаРабочихХодов = НоваяСтрокаНомераИнстр.ДлинаРабочихХодов + НайдСтрокаУдаров.КоличествоУдаров;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьИнструментыИзШапки(Знач ФайлАмада)
	ТабРезультат = Новый ТаблицаЗначений();
	ТабРезультат.Колонки.Добавить("Инструмент");
	ТабРезультат.Колонки.Добавить("ВидИнструмента");
	ТабРезультат.Колонки.Добавить("ВидИнструментаМатрица");
	ТабРезультат.Колонки.Добавить("ПоискПоМатрицам");
	ТабРезультат.Колонки.Добавить("Структура");
	
	Док = Новый ТекстовыйДокумент();
	Док.Прочитать(ФайлАмада);
	Для Икс = 1 По Док.КоличествоСтрок() Цикл
		Стр = Док.ПолучитьСтроку(Икс);
		Если ПустаяСтрока(Стр) ИЛИ Не Лев(Стр, 1) = "(" Тогда
			Продолжить;
		КонецЕсли;
		Лог(Стр);
		
		Литерал = "";
		ТекПоз = 1;
		Если СледующийЛитерал(Литерал, Стр, ТекПоз) Тогда
			СледующийЛитерал(Литерал, Стр, ТекПоз);
			УправСлово = ВРег(Литерал);
			
			//	*** Параметры Инструментов
			Если ЭтоЦифра(Лев(Литерал,1)) Тогда
				//	*** Добавляем инструмент
				НовСтр = ТабРезультат.Добавить();
				НовСтр.Инструмент = Литерал;
				
				СтрРезультат = Новый Соответствие();

				СледующийЛитерал(Литерал, Стр, ТекПоз);
				НовСтр.ВидИнструмента = ПолучитьВидИнстумента(Литерал);	
				НовСтр.ВидИнструментаМатрица = ПолучитьВидИнстументаМатрица(Литерал);	
				НовСтр.ПоискПоМатрицам = Истина;
				//	*** Прямоугольник
				Если Литерал = "RET" или Литерал = "ASL" Тогда
					//	*** Длина штамповочного инструмента
					СледующийЛитерал(Литерал, Стр, ТекПоз);
					СтрРезультат.Вставить(Хар_L60_Длина_Штам, Литерал);
					
					//	*** Берем значение без символа Х
					//	*** Ширина штамповочного инструмента
					СледующийЛитерал(Литерал, Стр, ТекПоз);
					СтрРезультат.Вставить(Хар_B60_Ширина_Штамп, Число(Прав(Литерал, СтрДлина(Литерал) - 1)));
					
					//	*** Пропускаем точку в конце
					СледующийЛитерал(Литерал, Стр, ТекПоз);
				//	*** Круг
				ИначеЕсли Литерал = 0 Тогда
					//	*** Диаметр штамповочного инструмента
					СледующийЛитерал(Литерал, Стр, ТекПоз);
					СтрРезультат.Вставить(Хар_D60_Диам_Штамп, Литерал);
				//	*** Квадрат
				ИначеЕсли Литерал = "Q" Тогда
					//	*** Длина штамповочного инструмента
					СледующийЛитерал(Литерал, Стр, ТекПоз);
					СтрРезультат.Вставить(Хар_L60_Длина_Штам, Литерал);
					//	*** Ширина штамповочного инструмента
					СтрРезультат.Вставить(Хар_B60_Ширина_Штамп, Литерал);
				ИначеЕсли Литерал = "SPC" Тогда
					//	*** SPC тип, код размера в CAM-системе
					СледующийЛитерал(Литерал, Стр, ТекПоз);
					СтрРезультат.Вставить(Хар_SPC_тип_Код_размера_CAM, Справочники.КодыРазмеровСАМ.НайтиПоКоду(Литерал));	
				КонецЕсли;

				//	*** Тип штамповочной станции	
				СледующийЛитерал(Литерал, Стр, ТекПоз);
				СтрРезультат.Вставить(Хар_Посадка_ТипШтам, ПолучитьТипШтамповочнойСтанции(Литерал));	
				
				//	*** Угол поворота
				СледующийЛитерал(Литерал, Стр, ТекПоз);
				СтрРезультат.Вставить(Хар_A60_Угол_Поворота_Штамп, Литерал);
				
				НовСтр.Структура = СтрРезультат;	
				
			//	*** Параметры Детали	
			//	*** DIMENSIONS
			ИначеЕсли УправСлово = "DIMENSIONS" Тогда
				СледующийЛитерал(Литерал, Стр, ТекПоз);
				DIM1 = Литерал;
				СледующийЛитерал(Литерал, Стр, ТекПоз);
				DIM2 = Литерал;	
			//	*** THICKNESS
			ИначеЕсли УправСлово = "THICKNESS" Тогда
				СледующийЛитерал(Литерал, Стр, ТекПоз);
				TH = Литерал;				
			//	*** CLAMP
			ИначеЕсли УправСлово = "CLAMP" Тогда
				СледующийЛитерал(Литерал, Стр, ТекПоз);
				CL1 = Литерал;
				СледующийЛитерал(Литерал, Стр, ТекПоз);
				CL2 = Литерал;
			//	*** MATERIAL
			ИначеЕсли УправСлово = "MATERIAL" Тогда
				СледующийЛитерал(Литерал, Стр, ТекПоз);
				MAT = Литерал;				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Зазор = ПолучитьЗазор(TH, MAT);
	
	Для Каждого Стр Из ТабРезультат Цикл
		Если Зазор <> 0 Тогда 
			Стр.Структура.Вставить(Хар_L61_Зазор_Штам, Зазор);
		КонецЕсли;
		Лог("*** " + Стр.Инструмент);
		Лог(Строка(Стр.ВидИнструмента));
		РаспечататьСоответствия(Стр.Структура);
		Лог(" ");
	КонецЦикла;
	
	Лог("DIM1 = " + DIM1);
	Лог("DIM2 = " + DIM2);
	Лог("TH = " + TH);
	Лог("CL1 = " + CL1);
	Лог("CL2 = " + CL2);
	Лог("MAT = " + MAT);
	
	Возврат ТабРезультат;
КонецФункции

Функция ЗаполнитьКоличествоУдаров(Знач ФайлАмада)
	ТабРезультат = Новый ТаблицаЗначений();
	ТабРезультат.Колонки.Добавить("НомерИнструмента");
	ТабРезультат.Колонки.Добавить("КоличествоУдаров");
		
	x1 = 0;
	y1 = 0;
	z1 = 0;
	
	Pi = 3.1415926535897932;

	КолИнструмента = 0;
	ПервИнструмента = "";
	
	// Длина ходов
	ДлинаБыстрых = 0; // быстрых
	ДлинаРабочих = 0; // рабочих
	ОборотыШпинделя = 0;
	НомИнструмента = 0;
	ПодачаИнструмента = 0;
	ВремяОбработки = 0;
	УправСлово = "";
	КолвоУдаров = 0;
	//	*** цикл по строчкам	
	Док = Новый ТекстовыйДокумент();
	Док.Прочитать(ФайлАмада);
	Для Икс = 1 По Док.КоличествоСтрок() Цикл
		Стр = Док.ПолучитьСтроку(Икс);
		Если ПустаяСтрока(Стр) ИЛИ Лев(Стр, 1) = "(" ИЛИ Лев(Стр, 1) = "%" 
			ИЛИ Лев(Стр, 1) = "O" ИЛИ Лев(Стр, 1) = "M"  ИЛИ Лев(Стр, 2) = "G7"
			ИЛИ Лев(Стр, 2) = "G0" ИЛИ Лев(Стр, 2) = "G9" ИЛИ Лев(Стр, 2) = "G5" Тогда
			Продолжить;
		КонецЕсли;
		Лог(Стр);
		
	    Команда = "";
	    Значение = 0;
	    ТекПоз = 1;
		i1 = 0;
	    j1 = 0;
		k1 = 0;
	    p1 = 0;
		q1 = 0;
		d1 = 0;

		УправСлово = " не отрабатывается!!!!!!!!!!!!!!!!!!";
		
	    Пока СледующаяПорция(Команда, Значение, Стр, ТекПоз) Цикл
		   //Лог("2 Ком - (" + Команда + ")   значение=" + Значение + "  позиция-" + ТекПоз);
		   Если  Команда = "T" Тогда
			  Если  ПервИнструмента = "" Тогда
			  	  ПервИнструмента = Значение;
			  Иначе
				 Лог("------------------------------------------------------------------");
				 Лог("======Номер инструмента = " + строка(НомИнструмента));
				 Лог("=КоличествоУдаров = " + строка(КолвоУдаров) + " шт");
				 Лог("------------------------------------------------------------------");
				 НовИнстр = ТабРезультат.Добавить();
				 НовИнстр.НомерИнструмента = "T" + строка(НомИнструмента);
				 НовИнстр.КоличествоУдаров = Число(КолвоУдаров);			 
				 КолвоУдаров = 0;
			  КонецЕсли;
				КолИнструмента = КолИнструмента + 1;
                НомИнструмента = Значение;
		   ИначеЕсли Команда = "X" Тогда
               x1 = Значение; 
			   УправСлово = "UDAR";
		   ИначеЕсли Команда = "Y" Тогда
 	           y1 = Значение; 
			   УправСлово = "UDAR";
		   ИначеЕсли Команда = "I" Тогда   
			   i1 = Значение; 
		   ИначеЕсли Команда = "J" Тогда   
			   j1 = Значение;
		   ИначеЕсли Команда = "K" Тогда   
			   k1 = Значение;
		   ИначеЕсли Команда = "P" Тогда   
			   p1 = Значение;
		   ИначеЕсли Команда = "Q" Тогда
			   q1 = Значение;
		   ИначеЕсли Команда = "D" Тогда
			   d1 = Значение;
		   ИначеЕсли Команда = "G" Тогда 
			   УправСлово = " не отрабатывается!!!!!!!!!!!!!!!!!!";
			   
			   Если Значение = 26  Тогда   
			       УправСлово = "OKRUG";
			   КонецЕсли;	
			   
			   Если Значение = 28  Тогда   
			       УправСлово = "LINE";
			   КонецЕсли;	
			   
			   Если Значение = 29  Тогда   
			       УправСлово = "DUGA2";
			   КонецЕсли;	
			   
			   Если Значение = 37 или Значение = 36  Тогда   
			       УправСлово = "SETKA";
			   КонецЕсли;	
			   
			   Если Значение = 66  Тогда   
			       УправСлово = "POLOS1";
			   КонецЕсли;	
			   
			   Если Значение = 67 Тогда   
			       УправСлово = "QVADR";
			   КонецЕсли;	
			   
			   Если Значение = 68 или Значение = 78 Тогда   
			       УправСлово = "DUGA1";
			   КонецЕсли;	
			   
			   Если Значение = 69 или Значение = 79 Тогда   
			       УправСлово = "POLOS2";
			   КонецЕсли;	
			   
			   Если Значение = 72 или Значение = 70 или Значение = 24 или Значение = 25 или Значение = 4 Тогда   
			       УправСлово = "PUSTO";
			   КонецЕсли;	

			   Лог(" Команда ==>" + строка(Значение) + " действие=" + УправСлово);

		 КонецЕсли;	  
	 КонецЦикла;
	 
	 Если КолИнструмента > 0 Тогда
		Если  УправСлово = "UDAR" Тогда
			 КолвоУдаров = КолвоУдаров + 1;
			 Лог("КоличествоУдаров = " + строка(КолвоУдаров));
		 ИначеЕсли УправСлово = "OKRUG" Тогда
	         Лог(" i1=" + строка(i1) + " j1=" + строка(j1) + " к1=" + строка(k1));
 			 КолвоУдаров = КолвоУдаров + k1;

			Лог("Окружность отверст. радиус=" + строка(i1) + "мм. с нач.углом=" + строка(j1) + "гр. Кол-во ударов=" + строка(k1));
            Лог("КоличествоУдаров = " + строка(КолвоУдаров));	
			 
		 ИначеЕсли УправСлово = "LINE" Тогда
	         Лог(" i1=" + строка(i1) + " j1=" + строка(j1) + " к1=" + строка(k1));
 			 КолвоУдаров = КолвоУдаров + k1;

			Лог("Линия под углом=" + строка(j1) + "гр. с интервалом=" + строка(i1) + "мм. Кол-во ударов=" + строка(k1));
            Лог("КоличествоУдаров = " + строка(КолвоУдаров));	
			
		 ИначеЕсли УправСлово = "DUGA2" Тогда
	         Лог(" i1=" + строка(i1) + " j1=" + строка(j1) + " p1=" + строка(k1));
 			 КолвоУдаров = КолвоУдаров + k1;

			Лог("Дуга не сплош. радиус=" + строка(i1) + "мм. с нач.углом=" + строка(j1) + "гр. углов.интерв.=" + строка(p1) +"гр. Кол-во ударов=" + строка(k1));
            Лог("КоличествоУдаров = " + строка(КолвоУдаров));	
			 
			
         ИначеЕсли УправСлово = "SETKA" Тогда
            Лог(" i1=" + строка(i1) + " p1=" + строка(p1) + " j1=" + строка(j1) +  " к1=" + строка(k1));
			
			КолвоУдаров = КолвоУдаров + k1*p1;
  			Лог("Сетка с интервал1=" + строка(i1) + "мм кол-во отв1=" + строка(p1) + " интерв2=" +строка(j1) + " мм. кол-во отв2=" + строка(k1));
            Лог("КоличествоУдаров = " + строка(КолвоУдаров));	

		 ИначеЕсли УправСлово = "DUGA1" Тогда
			
	       Лог(" к1=" + строка(k1) + " i1=" + строка(i1) + " q1=" + строка(q1));
		
			
			L = окр(k1*2*i1*Pi/360, 6);
			Если L < 0 Тогда
				L = -L;
			КонецЕсли;	
			
			
			u1 = окр(L/q1,6);
			u2 = окр(L/q1,0);
			Если u1 > u2 Тогда
				u2 = u2 + 1;
			КонецЕсли;	
			
			КолвоУдаров = КолвоУдаров + u2;

			Лог(" Дуга сплошная длиной=" + строка(L) + "мм.   Кол-во ударов=" + строка(u2));
            Лог("КоличествоУдаров = " + строка(КолвоУдаров));			
 		ИначеЕсли УправСлово = "POLOS1" Тогда
			
	       Лог("i1=" + строка(i1) + " p1=" + строка(p1));
			
			L = i1;
			Если L < 0 Тогда
				L = -L;
			КонецЕсли;	
			
			Если p1 < 0 Тогда
				p1 = -p1;
			КонецЕсли;		
			
			u1 = окр(L/p1,6);
			u2 = окр(L/p1,0);
			Если u1 > u2 Тогда
				u2 = u2 + 1;
			КонецЕсли;	
			
			КолвоУдаров = КолвоУдаров + u2;

			Лог(" Полоса1=" + строка(L) + "мм.   Кол-во ударов=" + строка(u2));
            Лог("КоличествоУдаров = " + строка(КолвоУдаров));
 		ИначеЕсли УправСлово = "QVADR" Тогда
			
	       Лог("i1=" + строка(i1) + "j1=" + строка(j1) + " p1=" + строка(p1));
			
			Если p1 < 0 Тогда
				p1 = -p1;
			КонецЕсли;	
			
			L = i1;
			Если L < 0 Тогда
				L = -L;
			КонецЕсли;	
			
			u1 = окр(L/p1,6);
			u2 = окр(L/p1,0);
			Если u1 > u2 Тогда
				u2 = u2 + 1;
			КонецЕсли;	
			
			LL = 2*L;
			uu2 = 2 * u2;
			
			L = j1;
			Если L < 0 Тогда
				L = -L;
			КонецЕсли;	
			
			u1 = окр(L/p1,6);
			u2 = окр(L/p1,0);
			Если u1 > u2 Тогда
				u2 = u2 + 1;
			КонецЕсли;	
			
			LL = LL + 2*(L - 2*p1);
			uu2 = uu2 + 2*(u2 - 2);
			
			
			КолвоУдаров = КолвоУдаров + uu2;

			Лог(" Квадратное отверстие периметр=" + строка(LL) + "мм.   Кол-во ударов=" + строка(uu2));
            Лог("КоличествоУдаров = " + строка(КолвоУдаров));
			
			
 		ИначеЕсли УправСлово = "POLOS2" Тогда
			
	       Лог("i1=" + строка(i1) + " q1=" + строка(q1));
			
			L = i1;
			Если L < 0 Тогда
				L = -L;
			КонецЕсли;	
			
			Если q1 < 0 Тогда
				q1 = -q1;
			КонецЕсли;		
			
			u1 = окр(L/q1,6);
			u2 = окр(L/q1,0);
			Если u1 > u2 Тогда
				u2 = u2 + 1;
			КонецЕсли;	
			
			КолвоУдаров = КолвоУдаров + u2;

			Лог(" Полоса2=" + строка(L) + "мм.   Кол-во ударов=" + строка(u2));
            Лог("КоличествоУдаров = " + строка(КолвоУдаров));			
			
		КонецЕсли;
      КонецЕсли;
	 
	КонецЦикла; 
	
	Лог("------------------------------------------------------------------");
	Лог("======Номер инструмента = " + строка(НомИнструмента));
    Лог("=КоличествоУдаров = " + строка(КолвоУдаров) + " шт");	
	
	НовИнстр = ТабРезультат.Добавить();
	НовИнстр.НомерИнструмента = "T" + строка(НомИнструмента);
	НовИнстр.КоличествоУдаров = Число(КолвоУдаров);
	
	
	Лог("------------------------------------------------------------------");
	Лог("=Номер перв.инструмента = " + строка(ПервИнструмента));
	Лог("=Номер посл.инструмента = " + строка(НомИнструмента));
    Лог("=Кол-во инструментов = " + строка(КолИнструмента));

	Возврат ТабРезультат;
КонецФункции

Функция ПоискатьИнструмент(Знач Настройка, Знач Значение, Знач МассивИнструментов)
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыИнструментов.Инструмент КАК Инструмент,
	|	ПараметрыИнструментов.Инструмент.ВидИнструмента КАК ВидИнструмента,
	|	ПараметрыИнструментов.Настройка КАК Настройка,
	|	ПараметрыИнструментов.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ПараметрыИнструментов КАК ПараметрыИнструментов
	|ГДЕ
	|	ПараметрыИнструментов.Настройка = &Настройка
	|	И ПараметрыИнструментов.Значение = &Значение
	|	И ВЫБОР
	|			КОГДА &ИспользоватьМассивИнструментов
	|				ТОГДА ПараметрыИнструментов.Инструмент В (&МассивИнструментов)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ПараметрыИнструментов.Инструмент.РазрешениеНаПрименение = ЗНАЧЕНИЕ(Перечисление.РазрешенияНаПрименение.ПрименениеРазрешеноТО)";
	Запрос.УстановитьПараметр("Настройка", Настройка);
	Запрос.УстановитьПараметр("Значение", Значение);
	Запрос.УстановитьПараметр("ИспользоватьМассивИнструментов", МассивИнструментов.Количество() > 0);
	Запрос.УстановитьПараметр("МассивИнструментов", МассивИнструментов);
	Если ОтладкаПоиска Тогда
		Лог("*** поиск по " + Настройка + " = " + Значение);	
		
		Результат = Запрос.Выполнить().Выгрузить();
		Выб = Результат.ВыбратьСтроку();
		Если Выб <> Неопределено Тогда
			Выб.Инструмент.ПолучитьФорму().ОткрытьМодально();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Инструмент");
КонецФункции

Процедура ЗаполнитьДопИнструменты(Знач СтрИнструмент)
	Если СтрИнструмент.ТипоразмерМатриц = Справочники.ТипоразмерыПробивныхИнструментов.ПустаяСсылка() и СтрИнструмент.ТипоразмерНаправляющихФормовочных = Справочники.ТипоразмерыФормовочныхИнструментов.ПустаяСсылка() Тогда
		Лог("ТипоразмерыПробивныхИнструментов и ТипоразмерыФормовочныхИнструментов не определено! " + "Для " + СтрИнструмент.Инструмент);
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Параметр.Инструмент КАК Инструмент,
	|	ЕСТЬNULL(ПараметрЗазорИнструмента.Значение, -1) КАК Зазор
	|ПОМЕСТИТЬ перв
	|ИЗ
	|	РегистрСведений.ПараметрыИнструментов КАК Параметр
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыИнструментов КАК ПараметрЗазорИнструмента
	|		ПО Параметр.Инструмент = ПараметрЗазорИнструмента.Инструмент
	|			И (ПараметрЗазорИнструмента.Настройка.Код = ""000000167"")
	|ГДЕ
	|	Параметр.Настройка = &Параметр
	|	И Параметр.Значение = &ПараметрЗначение
	|	И Параметр.Инструмент.РазрешениеНаПрименение = ЗНАЧЕНИЕ(Перечисление.РазрешенияНаПрименение.ПрименениеРазрешеноТО)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	перв.Инструмент КАК Инструмент,
	|	перв.Зазор КАК Зазор
	|ИЗ
	|	перв КАК перв
	|ГДЕ
	|	перв.Зазор = -1";
	
	Если СтрИнструмент.ТипоразмерМатриц <> Справочники.ТипоразмерыПробивныхИнструментов.ПустаяСсылка() Тогда
		Запрос.УстановитьПараметр("Параметр", Хар_Типоразмер_Проб);
		Запрос.УстановитьПараметр("ПараметрЗначение", СтрИнструмент.ТипоразмерМатриц);
	ИначеЕсли СтрИнструмент.ТипоразмерНаправляющихФормовочных <> Справочники.ТипоразмерыФормовочныхИнструментов.ПустаяСсылка() Тогда
		Запрос.УстановитьПараметр("Параметр", Хар_Типоразмер_Форм);
		Запрос.УстановитьПараметр("ПараметрЗначение", СтрИнструмент.ТипоразмерНаправляющихФормовочных);	
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТабДопИнструменты.Добавить();
		НоваяСтрока.Номер = СтрИнструмент.Номер;
		НоваяСтрока.Инструмент = Выборка.Инструмент;
		НоваяСтрока.ТипоразмерМатриц = Справочники.Инструменты.ПолучитьЗначениеПоИнструменту(Выборка.Инструмент, Хар_Типоразмер_Проб);
		НоваяСтрока.ТипоразмерНаправляющихФормовочных = Справочники.Инструменты.ПолучитьЗначениеПоИнструменту(Выборка.Инструмент, Хар_Типоразмер_Форм);
	КонецЦикла;
		
	Если СтрИнструмент.ТипШтамповочнойСтанции = Перечисления.ШтамповочныеСтанции.A Тогда
		НоваяСтрока = ТабДопИнструменты.Добавить();
		НоваяСтрока.Номер = СтрИнструмент.Номер;
		НоваяСтрока.Инструмент = Справочники.Инструменты.НайтиПоНаименованию("Направляющая A 52F320");
		НоваяСтрока.ТипоразмерМатриц = Справочники.Инструменты.ПолучитьЗначениеПоИнструменту(НоваяСтрока.Инструмент, Хар_Типоразмер_Проб);
		НоваяСтрока.ТипоразмерНаправляющихФормовочных = Справочники.Инструменты.ПолучитьЗначениеПоИнструменту(НоваяСтрока.Инструмент, Хар_Типоразмер_Форм);
		
		НоваяСтрока = ТабДопИнструменты.Добавить();
		НоваяСтрока.Номер = СтрИнструмент.Номер;
		НоваяСтрока.Инструмент = Справочники.Инструменты.НайтиПоНаименованию("Пружинный блок A 980000");
		НоваяСтрока.ТипоразмерМатриц = Справочники.Инструменты.ПолучитьЗначениеПоИнструменту(НоваяСтрока.Инструмент, Хар_Типоразмер_Проб);
		НоваяСтрока.ТипоразмерНаправляющихФормовочных = Справочники.Инструменты.ПолучитьЗначениеПоИнструменту(НоваяСтрока.Инструмент, Хар_Типоразмер_Форм);
	ИначеЕсли СтрИнструмент.ТипШтамповочнойСтанции = Перечисления.ШтамповочныеСтанции.B Тогда
		НоваяСтрока = ТабДопИнструменты.Добавить();
		НоваяСтрока.Номер = СтрИнструмент.Номер;
		НоваяСтрока.Инструмент = Справочники.Инструменты.НайтиПоНаименованию("Направляющая В 52F440");
		НоваяСтрока.ТипоразмерМатриц = Справочники.Инструменты.ПолучитьЗначениеПоИнструменту(НоваяСтрока.Инструмент, Хар_Типоразмер_Проб);
		НоваяСтрока.ТипоразмерНаправляющихФормовочных = Справочники.Инструменты.ПолучитьЗначениеПоИнструменту(НоваяСтрока.Инструмент, Хар_Типоразмер_Форм);
		
		НоваяСтрока = ТабДопИнструменты.Добавить();
		НоваяСтрока.Номер = СтрИнструмент.Номер;
		НоваяСтрока.Инструмент = Справочники.Инструменты.НайтиПоНаименованию("Пружинный блок B 981000");
		НоваяСтрока.ТипоразмерМатриц = Справочники.Инструменты.ПолучитьЗначениеПоИнструменту(НоваяСтрока.Инструмент, Хар_Типоразмер_Проб);
		НоваяСтрока.ТипоразмерНаправляющихФормовочных = Справочники.Инструменты.ПолучитьЗначениеПоИнструменту(НоваяСтрока.Инструмент, Хар_Типоразмер_Форм);
	ИначеЕсли СтрИнструмент.ТипШтамповочнойСтанции = Перечисления.ШтамповочныеСтанции.C Тогда
		НоваяСтрока = ТабДопИнструменты.Добавить();
		НоваяСтрока.Номер = СтрИнструмент.Номер;
		НоваяСтрока.Инструмент = Справочники.Инструменты.НайтиПоНаименованию("Пружинный блок C 90743 E");
		НоваяСтрока.ТипоразмерМатриц = Справочники.Инструменты.ПолучитьЗначениеПоИнструменту(НоваяСтрока.Инструмент, Хар_Типоразмер_Проб);
		НоваяСтрока.ТипоразмерНаправляющихФормовочных = Справочники.Инструменты.ПолучитьЗначениеПоИнструменту(НоваяСтрока.Инструмент, Хар_Типоразмер_Форм);	
	ИначеЕсли СтрИнструмент.ТипШтамповочнойСтанции = Перечисления.ШтамповочныеСтанции.D Тогда
		НоваяСтрока = ТабДопИнструменты.Добавить();
		НоваяСтрока.Номер = СтрИнструмент.Номер;
		НоваяСтрока.Инструмент = Справочники.Инструменты.НайтиПоНаименованию("Пружинный блок D 90719 E");
		НоваяСтрока.ТипоразмерМатриц = Справочники.Инструменты.ПолучитьЗначениеПоИнструменту(НоваяСтрока.Инструмент, Хар_Типоразмер_Проб);
		НоваяСтрока.ТипоразмерНаправляющихФормовочных = Справочники.Инструменты.ПолучитьЗначениеПоИнструменту(НоваяСтрока.Инструмент, Хар_Типоразмер_Форм);	
	КонецЕсли;
	
	Если СтрИнструмент.МенялиТипШтампСтанции Тогда
		НоваяСтрока = ТабДопИнструменты.Добавить();
		НоваяСтрока.Номер = СтрИнструмент.Номер;
		НоваяСтрока.Инструмент = Справочники.Инструменты.НайтиПоНаименованию("Переходник со станции A на станцию B");
		НоваяСтрока.ТипоразмерМатриц = Справочники.Инструменты.ПолучитьЗначениеПоИнструменту(НоваяСтрока.Инструмент, Хар_Типоразмер_Проб);
		НоваяСтрока.ТипоразмерНаправляющихФормовочных = Справочники.Инструменты.ПолучитьЗначениеПоИнструменту(НоваяСтрока.Инструмент, Хар_Типоразмер_Форм);	
	КонецЕсли;
КонецПроцедуры

//	***

Процедура ТабИнструментыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.Записать = Ложь Тогда	
		ОформлениеСтроки.ЦветФона = WebЦвета.СеребристоСерый;
	КонецЕсли;
КонецПроцедуры

Процедура ТабДопИнструментыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ЭлементыФормы.ТабИнструменты.ТекущаяСтрока <> Неопределено и ЭлементыФормы.ТабИнструменты.ТекущаяСтрока.Номер = ДанныеСтроки.Номер Тогда
		ОформлениеСтроки.ЦветФона = WebЦвета.ТопленоеМолоко;
	КонецЕсли;
КонецПроцедуры

Процедура ТабИнструментыПриАктивизацииСтроки(Элемент)
	ЭлементыФормы.ТабДопИнструменты.ОбновитьСтроки();
КонецПроцедуры

Процедура ОбработатьНовыеФайлыНажатие(Элемент)
	ВыполнитьОбработкуФайлов(Ложь);	
КонецПроцедуры

Процедура ОбновитьИмеющиесяФайлыНажатие(Элемент)
	ВыполнитьОбработкуФайлов(Истина);
КонецПроцедуры

Процедура ВыполнитьОбработкуФайлов(Знач ИмеющиеДокумент)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ХранилищеУПДокументы.Ссылка.Дсе КАК Дсе,
	|	ХранилищеУПДокументы.Файл КАК Файл,
	|	ХранилищеУПДокументы.Файл.ПутьФайла КАК ПутьФайла,
	|	ПривязкаИнструментов.Ссылка КАК Документ
	|ИЗ
	|	Справочник.ХранилищеУП.Документы КАК ХранилищеУПДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПривязкаИнструментов КАК ПривязкаИнструментов
	|		ПО ХранилищеУПДокументы.Ссылка.Дсе = ПривязкаИнструментов.НП
	|			И (ПривязкаИнструментов.ГрупппаИнструмента = ЗНАЧЕНИЕ(Перечисление.ГруппыПривязкиИнструмента.ЛистОбработка))
	|ГДЕ
	|	ХранилищеУПДокументы.Файл.Расширение = ""NC""
	|	И ВЫБОР
	|			КОГДА &ИмеющиеДокумент
	|				ТОГДА НЕ ПривязкаИнструментов.Ссылка ЕСТЬ NULL
	|			ИНАЧЕ ПривязкаИнструментов.Ссылка ЕСТЬ NULL
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ
	|АВТОУПОРЯДОЧИВАНИЕ");
	Запрос.УстановитьПараметр("ИмеющиеДокумент", ИмеющиеДокумент);
	Результат = Запрос.Выполнить().Выгрузить();
	
	МинутНаОдинДокумент = 0.022322;
	Если Вопрос("Поехали? " + Результат.Количество() + " штук. Займет ~" + Окр(МинутНаОдинДокумент * Результат.Количество()) + " минут", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда	
		Счетчик = 0;
		Состояние("#" + Счетчик + " из " + Результат.Количество() + " (осталось ~" + Окр(МинутНаОдинДокумент * (Результат.Количество() - Счетчик)) + " минут)");
		Для Каждого стр Из Результат Цикл 
			Счетчик = Счетчик + 1;
			Если Счетчик % 25 = 0 Тогда
				Состояние("#" + Счетчик + " из " + Результат.Количество() + " (осталось ~" + Окр(МинутНаОдинДокумент * (Результат.Количество() - Счетчик)) + " минут)");
			КонецЕсли;
			
			Попытка
				текДокОб = ?(ПустаяСтрока(стр.Документ), Неопределено, стр.Документ.ПолучитьОбъект());
				ПривязатьИнструментыАмады(стр.ДСЕ, стр.Файл, Истина, текДокОб);
			Исключение
				
			КонецПопытки;
			
			//Если Счетчик = 50 Тогда
			//	Прервать;
			//КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры;

Хар_A60_Угол_Поворота_Штамп = ПланыВидовХарактеристик.ХарактеристикиИнструментов.ПолучитьПоОбзоначению("A60");

Хар_B60_Ширина_Штамп = ПланыВидовХарактеристик.ХарактеристикиИнструментов.ПолучитьПоОбзоначению("B60");
Хар_B62_Ширина_Форм = ПланыВидовХарактеристик.ХарактеристикиИнструментов.ПолучитьПоОбзоначению("B62");

Хар_D60_Диам_Штамп = ПланыВидовХарактеристик.ХарактеристикиИнструментов.ПолучитьПоОбзоначению("D60");

Хар_L60_Длина_Штам = ПланыВидовХарактеристик.ХарактеристикиИнструментов.ПолучитьПоОбзоначению("L60");
Хар_L61_Зазор_Штам = ПланыВидовХарактеристик.ХарактеристикиИнструментов.ПолучитьПоОбзоначению("L61");
Хар_L66_Длина_Форм = ПланыВидовХарактеристик.ХарактеристикиИнструментов.ПолучитьПоОбзоначению("L66");

Хар_Типоразмер_Проб = ПланыВидовХарактеристик.ХарактеристикиИнструментов.НайтиПоКоду("000000189");
Хар_Типоразмер_Форм = ПланыВидовХарактеристик.ХарактеристикиИнструментов.НайтиПоКоду("000000190");

Хар_Посадка_ТипШтам = ПланыВидовХарактеристик.ХарактеристикиИнструментов.НайтиПоКоду("000000164");
Хар_SPC_тип_Код_размера_CAM = ПланыВидовХарактеристик.ХарактеристикиИнструментов.НайтиПоКоду("000000188");

ДСЕ = Справочники.НП.НайтиПоКоду("ДРКН73531200300000000");
Отладка = Ложь;
