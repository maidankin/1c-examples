
Процедура КоманднаяПанель1Сформировать(Кнопка)
	ТаблицаРезультат = ВернутьЗаполненнуюТЗ(ТаблицаРезультат.СкопироватьКолонки(), ПрайсЛистПП.ПолучитьОбъект());
КонецПроцедуры

Функция ВернутьЗаполненнуюТЗ(Знач СтруктураТаблицы, Знач ОбПрайсЛистПП)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КалькуляцияПППлаты.Плата КАК Плата,
	|	КалькуляцияПППлаты.Тп.ИзвещениеТП.Техпроцесс КАК ТехПроцессВертикаль,
	|	КалькуляцияПППлаты.Тп.ИзвещениеТП.Техпроцесс.Код КАК ТехПроцессВертикальКод,
	|	КалькуляцияПППлаты.Тп КАК Тп,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КалькуляцияПППараметры.СогласованныеЦены, 0) = 0
	|			ТОГДА ЕСТЬNULL(КалькуляцияПППараметры.ПредьявленныеЦены, 0)
	|		ИНАЧЕ ЕСТЬNULL(КалькуляцияПППараметры.СогласованныеЦены, 0)
	|	КОНЕЦ КАК ОптоваяЦена,
	|	КалькуляцияПППлаты.Ссылка.ЗаявкаНаПП КАК ЗаявкаНаПродукцию,
	|	КалькуляцияПППлаты.Ссылка.ЗаявкаНаПП.Дата КАК ДатаЗаявки,
	|	КалькуляцияПППлаты.Ссылка КАК КалькуляцияПП,
	|	ЗаявкаНаПродукциюДанные.Количество КАК Количество
	|ПОМЕСТИТЬ списокПлат
	|ИЗ
	|	Документ.КалькуляцияПП.Платы КАК КалькуляцияПППлаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КалькуляцияПП.Параметры КАК КалькуляцияПППараметры
	|		ПО КалькуляцияПППлаты.Ссылка = КалькуляцияПППараметры.Ссылка
	|			И КалькуляцияПППлаты.ИД = КалькуляцияПППараметры.ИД
	|			И (КалькуляцияПППараметры.Параметр.Код = ""ОптЦенаСНДС"")
	|			И (КалькуляцияПППараметры.Цех = ЗНАЧЕНИЕ(Справочник.Цеха.ПустаяСсылка))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаПродукцию.Данные КАК ЗаявкаНаПродукциюДанные
	|		ПО КалькуляцияПППлаты.Тп = ЗаявкаНаПродукциюДанные.Тп
	|			И КалькуляцияПППлаты.Ссылка.ЗаявкаНаПП = ЗаявкаНаПродукциюДанные.Ссылка
	|			И (ВЫБОР
	|				КОГДА &ИспользоватьЗаявку
	|					ТОГДА ЗаявкаНаПродукциюДанные.Ссылка = &ЗаявкаНаПродукцию
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|ГДЕ
	|	НЕ КалькуляцияПППлаты.Тп.ИзвещениеТП.Техпроцесс ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	внутр.ТехПроцессВертикаль КАК ТехПроцессВертикаль,
	|	внутр.Плата КАК Плата,
	|	ЗначенияПП.Значение КАК КолСлоев,
	|	ЗначенияПП1.Значение КАК ДлПлаты,
	|	ЗначенияПП2.Значение КАК ШрПлаты,
	|	ЗначенияПП1.Значение * ЗначенияПП2.Значение / 10000 КАК Площадь
	|ПОМЕСТИТЬ списокПараметры
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		списокПлат.Плата КАК Плата,
	|		списокПлат.ТехПроцессВертикаль КАК ТехПроцессВертикаль
	|	ИЗ
	|		списокПлат КАК списокПлат) КАК внутр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПП КАК ЗначенияПП
	|		ПО внутр.ТехПроцессВертикаль = ЗначенияПП.Архив
	|			И внутр.Плата = ЗначенияПП.Нп
	|			И (ЗначенияПП.Параметр.Код = ""КолСлоев"")
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПП КАК ЗначенияПП1
	|		ПО внутр.ТехПроцессВертикаль = ЗначенияПП1.Архив
	|			И внутр.Плата = ЗначенияПП1.Нп
	|			И (ЗначенияПП1.Параметр.Код = ""ДлПлаты"")
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПП КАК ЗначенияПП2
	|		ПО внутр.ТехПроцессВертикаль = ЗначенияПП2.Архив
	|			И внутр.Плата = ЗначенияПП2.Нп
	|			И (ЗначенияПП2.Параметр.Код = ""ШрПлаты"")
	|ГДЕ
	|	ЗначенияПП.Значение > 0
	|	И ЗначенияПП1.Значение > 0
	|	И ЗначенияПП2.Значение > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	списокПлат.Плата КАК Плата,
	|	списокПлат.ОптоваяЦена КАК ОптоваяЦена,
	|	списокПлат.Количество КАК Количество,
	|	списокПараметры.КолСлоев КАК КолСлоев,
	|	списокПараметры.ДлПлаты КАК ДлПлаты,
	|	списокПараметры.ШрПлаты КАК ШрПлаты,
	|	списокПараметры.Площадь КАК Площадь,
	|	списокПараметры.Площадь * списокПлат.Количество КАК ПлощадьНаКоличество,
	|	ВЫРАЗИТЬ(списокПлат.ОптоваяЦена / списокПараметры.Площадь КАК ЧИСЛО(10, 2)) КАК СтоимостьДециметра,
	|	списокПлат.ТехПроцессВертикаль КАК ТехПроцессВертикаль,
	|	списокПлат.ТехПроцессВертикальКод КАК ТехПроцессВертикальКод,
	|	списокПлат.Тп КАК Тп,
	|	списокПлат.ЗаявкаНаПродукцию КАК ЗаявкаНаПродукцию,
	|	списокПлат.ДатаЗаявки КАК ДатаЗаявки,
	|	списокПлат.КалькуляцияПП КАК КалькуляцияПП,
	|	МультизаготовкиХарактеристики.Значение КАК ДлМультиз,
	|	МультизаготовкиХарактеристики1.Значение КАК ШрМультиз,
	|	списокПлат.ТехПроцессВертикаль.КолвоМультизаготовок КАК КолППНаЗаг
	|ИЗ
	|	списокПлат КАК списокПлат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ списокПараметры КАК списокПараметры
	|		ПО списокПлат.Плата = списокПараметры.Плата
	|			И списокПлат.ТехПроцессВертикаль = списокПараметры.ТехПроцессВертикаль
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Мультизаготовки.Характеристики КАК МультизаготовкиХарактеристики
	|		ПО списокПлат.ТехПроцессВертикаль.Мультизаготовка = МультизаготовкиХарактеристики.Ссылка
	|			И (МультизаготовкиХарактеристики.Параметр.Код = ""ДлМультиз"")
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Мультизаготовки.Характеристики КАК МультизаготовкиХарактеристики1
	|		ПО списокПлат.ТехПроцессВертикаль.Мультизаготовка = МультизаготовкиХарактеристики1.Ссылка
	|			И (МультизаготовкиХарактеристики1.Параметр.Код = ""ШрМультиз"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	КолСлоев,
	|	Площадь,
	|	Плата
	|АВТОУПОРЯДОЧИВАНИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	внутр.Плата КАК Плата,
	|	внутр.ТехПроцессВертикаль КАК ТехПроцессВертикаль,
	|	ЗначенияПП.Параметр КАК Параметр,
	|	ЗначенияПП.Значение КАК Значение
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		списокПараметры.Плата КАК Плата,
	|		списокПараметры.ТехПроцессВертикаль КАК ТехПроцессВертикаль
	|	ИЗ
	|		списокПараметры КАК списокПараметры) КАК внутр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПП КАК ЗначенияПП
	|		ПО внутр.ТехПроцессВертикаль = ЗначенияПП.Архив
	|			И внутр.Плата = ЗначенияПП.Нп
	|			И (ЗначенияПП.Параметр.Код В (""Импеданс"", ""СухЗащМас"", ""ЖидЗащМас"", ""СлоиШелк"", ""КлОтвЗенН"", ""КлОтСкЗм"", ""КлассТочн"", ""ПлатПанел"", ""Sимзол"", ""Sгалзол"", ""ПрСложн"", ""КлЭтикШК"", ""СдачПЗ""))");
	Запрос.УстановитьПараметр("ЗаявкаНаПродукцию", ЗаявкаНаПродукцию);
	Запрос.УстановитьПараметр("ИспользоватьЗаявку", ЗначениеЗаполнено(ЗаявкаНаПродукцию));
	Пакет = Запрос.ВыполнитьПакет();
	ТабПараметры = Пакет.Получить(3).Выгрузить();
	ТабПлаты = Пакет.Получить(2).Выгрузить();
	
	ПарамSимзол = Справочники.ПараметрыПП.НайтиПоКоду("Sимзол"); 						//	***	столбец 14
	ПарамSгалзол = Справочники.ПараметрыПП.НайтиПоКоду("Sгалзол"); 						//	***	столбец 15
	ПарамПрСложн = Справочники.ПараметрыПП.НайтиПоКоду("ПрСложн"); 						//	***	столбец 16
	ПарамКлЭтикШК = Справочники.ПараметрыПП.НайтиПоКоду("КлЭтикШК"); 					//	***	столбец 17
	ПарамСдачПЗ = Справочники.ПараметрыПП.НайтиПоКоду("СдачПЗ"); 						//	***	столбец 18
	ПарамИмпеданс = Справочники.ПараметрыПП.НайтиПоКоду("Импеданс");					//	***	столбец 19
	ПарамСухЗащМас = Справочники.ПараметрыПП.НайтиПоКоду("СухЗащМас"); 					//	***	столбец 20
	ПарамЖидЗащМас = Справочники.ПараметрыПП.НайтиПоКоду("ЖидЗащМас"); 					//	***	столбец 21
	ПарамСлоиШелк = Справочники.ПараметрыПП.НайтиПоКоду("СлоиШелк"); 					//	***	столбец 22
	ПарамКлОтвЗенН = Справочники.ПараметрыПП.НайтиПоКоду("КлОтвЗенН"); 					//	***	столбец 23
	ПарамКлОтСкЗм = Справочники.ПараметрыПП.НайтиПоКоду("КлОтСкЗм"); 					//	***	столбец 24
	ПарамКлассТочн = Справочники.ПараметрыПП.НайтиПоКоду("КлассТочн"); 					//	***	столбец 25
	ПарамПлатПанел = Справочники.ПараметрыПП.НайтиПоКоду("ПлатПанел"); 					//	***	столбец 26
	
	Номер = 0;
	ВремТаб = СтруктураТаблицы.Скопировать();
	
	Если ПереопределитьГруппыПлат Тогда
		ОбПрайсЛистПП.СвязиФормулаТП.Очистить();
	КонецЕсли;
	
	Для Каждого стр Из ТабПлаты Цикл 
		Номер = Номер + 1;
		Если Номер % 25 = 0 Тогда
			Состояние("Тек номер " + Номер + " из " + ТабПлаты.Количество());
		КонецЕсли;
		
		НовСтр = ВремТаб.Добавить();
		
		БазоваяЦенаДмИзПрайса = 0;
		ЦенаПодготовкаУП = 0;	
		НовСтр.ГруппаПрайса = "Не была определена";
		ФормулаУсловия = ОбПрайсЛистПП.ВернутьФормулуУсловияПоТП(стр.ТехПроцессВертикаль, ПереопределитьГруппыПлат);
		НайдСтроки = ОбПрайсЛистПП.Стоимость.НайтиСтроки(Новый Структура("ФормулаУсловия", ФормулаУсловия));
		Если НайдСтроки.Количество() > 0 Тогда
			строка = НайдСтроки[0];
			//	***	столбец скрытый
			НовСтр.ГруппаПрайса = строка.ТипППИПлощадьПоСлоюТОР;
			
			ЦенаПодготовкаУП = строка.ПодготовкаУП;
			Если стр.ПлощадьНаКоличество < 1 Тогда
				БазоваяЦенаДмИзПрайса = строка.До1Дм;
			ИначеЕсли стр.ПлощадьНаКоличество < 3 Тогда
				БазоваяЦенаДмИзПрайса = строка.До3Дм;
			ИначеЕсли стр.ПлощадьНаКоличество < 15 Тогда
				БазоваяЦенаДмИзПрайса = строка.До15Дм;
			ИначеЕсли стр.ПлощадьНаКоличество < 75 Тогда
				БазоваяЦенаДмИзПрайса = строка.До75Дм;
			ИначеЕсли стр.ПлощадьНаКоличество < 150 Тогда
				БазоваяЦенаДмИзПрайса = строка.До150Дм;
			ИначеЕсли стр.ПлощадьНаКоличество < 300 Тогда
				БазоваяЦенаДмИзПрайса = строка.До300Дм;		
			ИначеЕсли стр.ПлощадьНаКоличество >= 300 Тогда
				БазоваяЦенаДмИзПрайса = строка.Свыше300Дм;
			КонецЕсли;
		КонецЕсли;	
		
		//	***	столбцы скрытые
		НовСтр.ТП = стр.ТехПроцессВертикаль;		
		НовСтр.ТпВертикальКод = стр.ТехПроцессВертикальКод;	
		НовСтр.ЗаявкаНаПродукцию = стр.ЗаявкаНаПродукцию;
		НовСтр.КалькуляцияПП = стр.КалькуляцияПП;
		НовСтр.ДатаЗаявки = стр.ДатаЗаявки;

		//	***	столбец 1
		НовСтр.ПП = стр.Плата;	
		//	***	столбец 2
		НовСтр.ОптоваяЦенаПП = стр.ОптоваяЦена;
		//	***	столбец 3		
		НовСтр.КолвоПП = стр.Количество;
		//	***	столбец 4	
		НовСтр.ОптоваяЦенаДм = стр.СтоимостьДециметра;
		//	***	столбец 5
		НовСтр.БазоваяЦенаДм = БазоваяЦенаДмИзПрайса;
		НовСтр.ЦенаПодготовкаУП = ЦенаПодготовкаУП;
		
		//	***	расчет ДополнениеКСтоимости
		КоэфПодготовкиУП = 1;
		ДопКоэф = 0;
		ДопЗатратыРубКПодготовке = 0;
		ДопЗатратыРубНаДм = 0;
		ДопЗатратыРубНаПП = 0;
		//Для Каждого строка Из ОбПрайсЛистПП.ДополнениеКСтоимости Цикл 
		//	ЗначениеПараметраПроверки = ВернутьЗначениеПараметра(ТабПараметры, стр.Плата, стр.ТехПроцессВертикаль, строка.Параметр);
		//	
		//	//	***	если значение параметра в ТЧ не заполнено (равно 0), тогда проверка идет на > 0 иначе выполняется проверка на равенство параметра платы и параметра из ТЧ
		//	Если (строка.ЗначениеПараметра > 0 И ЗначениеПараметраПроверки = строка.ЗначениеПараметра) Или (строка.ЗначениеПараметра = 0 И ЗначениеПараметраПроверки > 0) Тогда
		//		КоэфПодготовкиУП = КоэфПодготовкиУП + строка.КоэфПодготовкиУП;
		//		ДопЗатратыРубКПодготовке = ДопЗатратыРубКПодготовке + строка.ДопЗатратыРубКПодготовке;
		//		ДопКоэф = ДопКоэф + строка.ДопКоэф;
		//		ДопЗатратыРубНаДм = ДопЗатратыРубНаДм + строка.ДопЗатратыРубНаДм * ВернутьЗначениеПараметра(ТабПараметры, стр.Плата, стр.ТехПроцессВертикаль, строка.Параметр); 
		//		ДопЗатратыРубНаПП = ДопЗатратыРубНаПП + строка.ДопЗатратыРубНаПП; 
		//	КонецЕсли;
		//КонецЦикла;	
		
		//	***	новый вариант проверки условий для параметров
		Для Каждого строка Из ОбПрайсЛистПП.ДополнениеКСтоимости Цикл 
			ЗначениеПараметраПроверки = ВернутьЗначениеПараметра(ТабПараметры, стр.Плата, стр.ТехПроцессВертикаль, строка.Параметр);
			
			Если ПустаяСтрока(строка.ОперацияСоЗначением) Тогда
				Продолжить;
			ИначеЕсли строка.ОперацияСоЗначением = "=" И ЗначениеПараметраПроверки <> строка.ЗначениеПараметра Тогда
				Продолжить; 
			ИначеЕсли строка.ОперацияСоЗначением = "<>" И ЗначениеПараметраПроверки = строка.ЗначениеПараметра Тогда
				Продолжить; 
			ИначеЕсли строка.ОперацияСоЗначением = ">" И ЗначениеПараметраПроверки <= строка.ЗначениеПараметра Тогда
				Продолжить; 
			ИначеЕсли строка.ОперацияСоЗначением = ">=" И ЗначениеПараметраПроверки < строка.ЗначениеПараметра Тогда
				Продолжить; 
			ИначеЕсли строка.ОперацияСоЗначением = "<" И ЗначениеПараметраПроверки >= строка.ЗначениеПараметра Тогда
				Продолжить; 
			ИначеЕсли строка.ОперацияСоЗначением = "<=" И ЗначениеПараметраПроверки > строка.ЗначениеПараметра Тогда
				Продолжить; 
			КонецЕсли;
			
			//	***	если дошли до этой строки то нужно увеличить стоимость
			КоэфПодготовкиУП = КоэфПодготовкиУП + строка.КоэфПодготовкиУП;
			ДопЗатратыРубКПодготовке = ДопЗатратыРубКПодготовке + строка.ДопЗатратыРубКПодготовке;
			ДопКоэф = ДопКоэф + строка.ДопКоэф;
			//Если строка.ДопКоэфНаДопЗатраты Тогда	
			ДопЗатратыРубНаДм = ДопЗатратыРубНаДм + строка.ДопЗатратыРубНаДм * ВернутьЗначениеПараметра(ТабПараметры, стр.Плата, стр.ТехПроцессВертикаль, строка.Параметр); 
			ДопЗатратыРубНаПП = ДопЗатратыРубНаПП + строка.ДопЗатратыРубНаПП; 
			//КонецЕсли;
		КонецЦикла;
		НовСтр.ДопЗатратыРубКПодготовке = ДопЗатратыРубКПодготовке;
		НовСтр.ДопЗатратыПоКоэф = (ЦенаПодготовкаУП + ДопЗатратыРубКПодготовке) * (КоэфПодготовкиУП - 1);
		НовСтр.ДопЗатратыВсегоКПодготовке = НовСтр.ДопЗатратыРубКПодготовке + НовСтр.ДопЗатратыПоКоэф;
		//	***	столбец 6
		НовСтр.ДопЗатратыРубНаДм = ДопЗатратыРубНаДм;
		НовСтр.ДопРублиНаПлату = стр.Количество * ДопЗатратыРубНаПП / стр.ПлощадьНаКоличество;
		НовСтр.ДопКоэфНаБазовуюЦену = ДопКоэф * БазоваяЦенаДмИзПрайса;
		НовСтр.ЗатратыДопСтатейНаДм = НовСтр.ДопКоэфНаБазовуюЦену + НовСтр.ДопРублиНаПлату + НовСтр.ДопЗатратыРубНаДм;
		//	***	столбец 7
		НовСтр.НаРазработкуУП = (ЦенаПодготовкаУП + ДопЗатратыРубКПодготовке) / стр.ПлощадьНаКоличество * КоэфПодготовкиУП;
		//	***	столбец 8
		НовСтр.ЦенаПоПрайсуДм = НовСтр.БазоваяЦенаДм + НовСтр.ЗатратыДопСтатейНаДм + НовСтр.НаРазработкуУП;
		
		НовСтр.ЦенаПоПрайсуПП = стр.ДлПлаты * стр.ШрПлаты * НовСтр.ЦенаПоПрайсуДм / 10000;
		//	***	столбец 9
		Если НовСтр.ЦенаПоПрайсуДм <> 0 Тогда 
			НовСтр.Отклонение = 100 * (НовСтр.ЦенаПоПрайсуДм - НовСтр.ОптоваяЦенаДм) / НовСтр.ЦенаПоПрайсуДм;
		КонецЕсли;
		//	***	столбец 10
		НовСтр.КлСл = стр.КолСлоев; 
		//	***	столбец 11
		НовСтр.ДлПП = стр.ДлПлаты;
		//	***	столбец 12
		НовСтр.ШрПП = стр.ШрПлаты;
		
		//	***	столбец **
		НовСтр.ДлЗаг = стр.ДлМультиз;
		//	***	столбец **
		НовСтр.ШрЗаг = стр.ШрМультиз;
		//	***	столбец **
		НовСтр.КолППНаЗаг = стр.КолППНаЗаг;		
		//	***	столбец **
		НовСтр.ПроцентИспользования = 100 * стр.ДлПлаты * стр.ШрПлаты * стр.КолППНаЗаг / (стр.ДлМультиз * стр.ШрМультиз);
		
		//	***	столбец 13
		НовСтр.SНаКол = стр.ПлощадьНаКоличество;
		//	***	столбец 14
		НовСтр.Sимзол = ВернутьЗначениеПараметра(ТабПараметры, стр.Плата, стр.ТехПроцессВертикаль, ПарамSимзол);
		//	***	столбец 15
		НовСтр.Sгалзол = ВернутьЗначениеПараметра(ТабПараметры, стр.Плата, стр.ТехПроцессВертикаль, ПарамSгалзол);
		//	***	столбец 16
		НовСтр.ПрСложн = ВернутьЗначениеПараметра(ТабПараметры, стр.Плата, стр.ТехПроцессВертикаль, ПарамПрСложн);
		//	***	столбец 17
		НовСтр.КлЭтикШК = ВернутьЗначениеПараметра(ТабПараметры, стр.Плата, стр.ТехПроцессВертикаль, ПарамКлЭтикШК);
		//	***	столбец 18
		НовСтр.СдачПЗ = ВернутьЗначениеПараметра(ТабПараметры, стр.Плата, стр.ТехПроцессВертикаль, ПарамСдачПЗ);
		//	***	столбец 19
		НовСтр.Импеданс = ВернутьЗначениеПараметра(ТабПараметры, стр.Плата, стр.ТехПроцессВертикаль, ПарамИмпеданс);
		//	***	столбец 20
		НовСтр.СухЗащМас = ВернутьЗначениеПараметра(ТабПараметры, стр.Плата, стр.ТехПроцессВертикаль, ПарамСухЗащМас);
		//	***	столбец 21
		НовСтр.ЖидЗащМас = ВернутьЗначениеПараметра(ТабПараметры, стр.Плата, стр.ТехПроцессВертикаль, ПарамЖидЗащМас);
		//	***	столбец 22
		НовСтр.СлоиШелк = ВернутьЗначениеПараметра(ТабПараметры, стр.Плата, стр.ТехПроцессВертикаль, ПарамСлоиШелк);
		//	***	столбец 23
		НовСтр.КлОтвЗенН = ВернутьЗначениеПараметра(ТабПараметры, стр.Плата, стр.ТехПроцессВертикаль, ПарамКлОтвЗенН);
		//	***	столбец 24
		НовСтр.КлОтСкЗм = ВернутьЗначениеПараметра(ТабПараметры, стр.Плата, стр.ТехПроцессВертикаль, ПарамКлОтСкЗм);
		//	***	столбец 25
		НовСтр.КлассТочн = ВернутьЗначениеПараметра(ТабПараметры, стр.Плата, стр.ТехПроцессВертикаль, ПарамКлассТочн);
		//	***	столбец 26
		НовСтр.ПлатПанел = ВернутьЗначениеПараметра(ТабПараметры, стр.Плата, стр.ТехПроцессВертикаль, ПарамПлатПанел);
	КонецЦикла;
	
	Если ОбПрайсЛистПП.Модифицированность() Тогда
		ОбПрайсЛистПП.Записать();
	КонецЕсли;
	
	Возврат ВремТаб;
КонецФункции

Функция ВернутьЗначениеПараметра(Знач ТаблицаПараметров, Знач Плата, Знач ТехПроцессВертикаль, Знач Параметр)
	ВозврРезультат = 0;
	
	НайдСтроки = ТаблицаПараметров.НайтиСтроки(Новый Структура("Плата, ТехПроцессВертикаль, Параметр", Плата, ТехПроцессВертикаль, Параметр));
	Если НайдСтроки.Количество() > 0 Тогда
		ВозврРезультат = НайдСтроки[0].Значение;
	КонецЕсли;
	
	Возврат ВозврРезультат;
КонецФункции

Процедура ТаблицаРезультатВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	Если Колонка.Имя = "ЗаявкаНаПродукцию" Тогда
		ВыбраннаяСтрока.ЗаявкаНаПродукцию.ПолучитьФорму().Открыть();
	ИначеЕсли Колонка.Имя = "КалькуляцияПП" Тогда
		ВыбраннаяСтрока.КалькуляцияПП.ПолучитьФорму().Открыть();
	Иначе
		ФормаПлаты = ВнешниеОбработки.ПолучитьФорму("\\sql\отчёт\Обработки1С8\Хранилище\РасчетныеТП\ХарактеристикиПП.epf","Форма");
		формаПлаты.ПолеВводаТп = ВыбраннаяСтрока.ТП;
		
		ФормаПлаты.Открыть();	
	КонецЕсли; 
КонецПроцедуры

Процедура ЗаявкаНаПродукциюНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	списокТипов = Новый СписокЗначений();
	списокТипов.Добавить(Справочники.ЗаявкиНаименованиеПродукции.НайтиПоКоду(1));
	списокТипов.Добавить(Справочники.ЗаявкиНаименованиеПродукции.НайтиПоКоду(6));
	
	ФормаВыбора = Документы.ЗаявкаНаПродукцию.ПолучитьФормуВыбора();
	
	ФормаВыбора.ДокументСписок.Отбор.ТипПродукции.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбора.ДокументСписок.Отбор.ТипПродукции.Значение = списокТипов;          
	ФормаВыбора.ДокументСписок.Отбор.ТипПродукции.Использование = Истина;
	
	Выбор = ФормаВыбора.ОткрытьМодально();
	
	Если Выбор <> Неопределено Тогда
		Элемент.Значение = Выбор;	
	КонецЕсли;
КонецПроцедуры

ПрайсЛистПП = Справочники.ПрайсЛистПП.НайтиПоКоду(1);
